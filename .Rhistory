print(p1 + p2)
pvalues$pvalue.wilcoxon<- as.numeric(pvalue.wilcoxon)
p1 <- ggplot(pvalues, aes(x = wilcoxon)) + geom_histogram(bins = 50, binwidth = .03)+
labs(title = "Raw p-values") +
ylim(c(0, 80))
p2 <- ggplot(pvalues, aes(x = pvalue.wilcoxon.adjusted)) +
geom_histogram(bins = 50, binwidth = .03) +
labs(title = "Adjusted p-values") +
ylim(c(0, 80))
print(p1 + p2)
library(reshape2)
library(tidyverse)
pvalues$pvalue.wilcoxon<- as.numeric(pvalue.wilcoxon)
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) + geom_histogram(bins = 50, binwidth = .03)+
labs(title = "Raw p-values") +
ylim(c(0, 80))
p2 <- ggplot(pvalues, aes(x = pvalue.wilcoxon.adjusted)) +
geom_histogram(bins = 50, binwidth = .03) +
labs(title = "Adjusted p-values") +
ylim(c(0, 80))
print(p1 + p2)
p <- ggplot(data = pvalues,
aes(x = pvalue.ttest.adjusted,
y = pvalue.wilcoxon.adjusted)) +
geom_text(aes(label = taxon)) +
geom_abline(aes(intercept = 0, slope = 1)) +
geom_hline(aes(yintercept = 0.05), shape = 2) +
geom_vline(aes(xintercept = 0.05), shape = 2)
print(p)
rmarkdown::render('all.Rmd','all')
rmarkdown::render('all.Rmd','all')
rmarkdown::render('Betadiversity.Rmd','all')
library(microbiome)
library(dplyr)
data(peerj32)
pseq <- peerj32$phyloseq
betas <- list()
groups <- as.character(unique(meta(pseq)$group))
for (g in groups) {
df <- subset(meta(pseq), group == g)
beta <- c()
for (subj in df$subject) {
# Pick the samples for this subject
dfs <- subset(df, subject == subj)
# Check that the subject has two time points
if (nrow(dfs) == 2) {
s <- as.character(dfs$sample)
# Here with just two samples we can calculate the
# beta diversity directly
beta[[subj]] <- divergence(abundances(pseq)[, s[[1]]],
abundances(pseq)[, s[[2]]],
method = "bray")
}
}
betas[[g]] <- beta
}
boxplot(betas)
class(betas)
boxplot(betas$Placebo)
class(beta)
boxplot(mtcars)
boxplot(as.data.frame(beta))
boxplot(as.data.frame(betas))
beta[[subj]] <- divergence(abundances(pseq)[, s[[1]]]
abundances(pseq)[, s[[2]]],
# Here with just two samples we can calculate the
# beta diversity directly
beta[[subj]] <- divergence(abundances(pseq)[, s[[1]]],abundances(pseq)[, s[[2]]],method = "bray")
beta
betas <- list()
groups <- as.character(unique(meta(pseq)$group))
for (g in groups) {
df <- subset(meta(pseq), group == g)
beta <- c()
for (subj in df$subject) {
# Pick the samples for this subject
dfs <- subset(df, subject == subj)
# Check that the subject has two time points
if (nrow(dfs) == 2) {
s <- as.character(dfs$sample)
# Here with just two samples we can calculate the
# beta diversity directly
beta[[subj]] <- divergence(abundances(pseq)[, s[[1]]],abundances(pseq)[, s[[2]]],method = "bray")
}
}
betas[[g]] <- beta
}
boxplot(betas)
str(betas)
head(sort(betas[[1]], decreasing=TRUE), 3)
betas[1]
betas[[]]
betas[[1]]
as.data.frame(betas)
View(as.data.frame(betas))
f<-as.data.frame(betas)
f
View(f)
t(f)
View(t(f))
boxplot(t(f))
View(as.data.frame(beta))
df<- t(as.data.frame(betas))
View(df)
s<-rownames(df)
df$s<-rownames(df)
View(df)
View(df)
rm(df)
df<- t(as.data.frame(betas))
View(df)
class(df)
df<- (as.data.frame(t(betas)))
View(df)
class(df)
df$Placebo
boxplot(df)
df
View(df)
boxplot(t(betas))
df<- as.data.frame(betas)
df<- t(df)
class(df)
df$s<-rownames(df)
df<- as.data.frame(betas)
s<-colnames(df)
class(df)
df<- t(betas)
df<- as.data.frame(df)
df
class(df)
df$Placebo
df$LGG
View(df[[1]][[1]])
df<- t(betas)
df<- data.frame(df)
df<- unlist(betas)
df<- unlist(betas, recursive = T, use.names = T)
class(df)
boxplot(df)
boxplot(as.data.frame(df))
df$si<- rownames(df)
df<- unlist(betas, recursive = F, use.names = T)
rm(df)
df<- unlist(betas, recursive = F, use.names = T)
View(df)
df<- unlist(betas, recursive = T, use.names = T)
df<- data.frame(df)
View(df)
df$df
boxplot(df)
boxplot(df$df)
boxplot(rownames(df))
dim(df)
betas <- list()
groups <- as.character(unique(meta(pseq)$group))
for (g in groups) {
df <- subset(meta(pseq), group == g)
beta <- c()
for (subj in df$subject) {
# Pick the samples for this subject
dfs <- subset(df, subject == subj)
# Check that the subject has two time points
if (nrow(dfs) == 2) {
s <- as.character(dfs$sample)
# Here with just two samples we can calculate the
# beta diversity directly
beta[[subj]] <- divergence(abundances(pseq)[, s[[1]]],abundances(pseq)[, s[[2]]],method = "bray")
}
}
betas[[g]] <- beta
}
df<- unlist(betas, recursive = T, use.names = T)
df<- data.frame(df)
p<- ggplot(df, aes(x = df))+ geom_boxplot()
p
p<- ggplot(df, aes(x = rownames(df)))+ geom_boxplot()
p
rmarkdown::render('all.Rmd','all')
rmarkdown::render('all.Rmd','all')
rmarkdown::render('all.Rmd','all')
# Load libraries
library(microbiome)
library(ggplot2)
library(dplyr)
# Probiotics intervention example data
data(peerj32) # Source: https://peerj.com/articles/32/
pseq <- peerj32$phyloseq # Rename the example data
# Get OTU abundances and sample metadata
otu <- abundances(microbiome::transform(pseq, "log10"))
meta <- meta(pseq)
# Compare the two groups with limma
library(limma)
# Prepare the design matrix which states the groups for each sample
# in the otu
design <- cbind(intercept = 1, Grp2vs1 = meta[["sex"]])
rownames(design) <- rownames(meta)
design <- design[colnames(otu), ]
# NOTE: results and p-values are given for all groupings in the design matrix
# Now focus on the second grouping ie. pairwise comparison
coef.index <- 2
# Fit the limma model
fit <- lmFit(otu, design)
fit <- eBayes(fit)
# Limma P-values
pvalues.limma = fit$p.value[, 2]
# Limma effect sizes
efs.limma <-  fit$coefficients[, "Grp2vs1"]
# Summarise
library(knitr)
kable(topTable(fit, coef = coef.index, p.value=0.1), digits = 2)
# QQ
qqt(fit$t[, coef.index], df = fit$df.residual + fit$df.prior); abline(0,1)
# Volcano
volcanoplot(fit, coef = coef.index, highlight = coef.index)
# Compare the two groups with t-test
library(dplyr)
pvalues.ttest <- c()
male.samples <- dplyr::filter(meta, sex == "male")$sample
female.samples <- dplyr::filter(meta, sex == "female")$sample
for (tax in rownames(otu)) {
pvalues.ttest[[tax]] <- t.test(otu[tax, male.samples], otu[tax, female.samples])$p.value
}
# Multiple testing correction
pvalues.ttest <- p.adjust(pvalues.ttest, method = "fdr")
# Compare p-values between limma and t-test
taxa <- rownames(otu)
plot(pvalues.ttest[taxa], pvalues.limma[taxa])
abline(0,1,lty = 2)
library(microbiome)
library(dplyr)
data(peerj32)
pseq <- peerj32$phyloseq
betas <- list()
groups <- as.character(unique(meta(pseq)$group))
for (g in groups) {
df <- subset(meta(pseq), group == g)
beta <- c()
for (subj in df$subject) {
# Pick the samples for this subject
dfs <- subset(df, subject == subj)
# Check that the subject has two time points
if (nrow(dfs) == 2) {
s <- as.character(dfs$sample)
# Here with just two samples we can calculate the
# beta diversity directly
beta[[subj]] <- divergence(abundances(pseq)[, s[[1]]],abundances(pseq)[, s[[2]]],method = "bray")
}
}
betas[[g]] <- beta
}
df<- unlist(betas, recursive = T, use.names = T)
df<- data.frame(df)
p<- ggplot(df, aes(x = rownames(df)))+ geom_boxplot()
p
beta
class(beta)
View(beta)
beta[["S8"]][[1]]
View(unlist(beta))
boxplot(unlist(beta))
identical(betas, beta)
length(beta)
length(betas)
dim(beta)
View(unlist(betas))
betas
df<- unlist(betas)
df
View(df)
class(df)
boxplot(df)
s<-rownames(df)
s
View(s)
class(df)
str(df)
df<- as.data.frame(df)
View(df)
s<-rownames(df)
s
df <- unlist(betas)
df <- as.data.frame(unlist(betas))
s<- rownames(df)
si<- separate(s, s, into = c('names','s'))
si<- as.data.frame(s)
si<- separate(si, s, into = c('names','s'))
si
df1<- bind_cols(df, si)
View(df1)
rownames(df1)<- df1$names ; df1$names<- NULL
rownames(df1)<- df1$s ; df1$s<- NULL
boxplot(df1$names)
p<- ggplot(df1, aes(x = names)) + geom_boxplot()
p
p<- ggplot(df1, aes(x = names, y = `unlist(betas)`)) + geom_boxplot()
p
p + labs(ylab(''))
p<- ggplot(df1, aes(x = names, y = `unlist(betas)`)) + geom_boxplot()
p + labs(ylab(''))
p + labs(ylab('rer'))
p<- ggplot(df1, aes(x = names, y = `unlist(betas)`)) + geom_boxplot()
p + labs(ylab('rer'))
p + labs(ylab = 'rer')
p<- ggplot(df1, aes(x = names, y = `unlist(betas)`)) + geom_boxplot()
p + labs(ylab = 'rer')
p + ylab('ere')
p + ylab('')
p + ylab('') + xlab('')
p<- ggplot(df1, aes(x = names, y = `unlist(betas)`))+
geom_boxplot() + ylab('') + xlab('')
p
betas <- list()
groups <- as.character(unique(meta(pseq)$group))
for (g in groups) {
df <- subset(meta(pseq), group == g)
beta <- c()
for (subj in df$subject) {
# Pick the samples for this subject
dfs <- subset(df, subject == subj)
# Check that the subject has two time points
if (nrow(dfs) == 2) {
s <- as.character(dfs$sample)
# Here with just two samples we can calculate the
# beta diversity directly
beta[[subj]] <- divergence(abundances(pseq)[, s[[1]]],abundances(pseq)[, s[[2]]],method = "bray")
}
}
betas[[g]] <- beta
}
# boxplot
df <- as.data.frame(unlist(betas))
s<- rownames(df)
si<- as.data.frame(s)
si<- separate(si, s, into = c('names','s'))
si
df1<- bind_cols(df, si)
rownames(df1)<- df1$s ; df1$s<- NULL
p<- ggplot(df1, aes(x = names, y = `unlist(betas)`))+
geom_boxplot() + ylab('') + xlab('')
plot(p)
plot(p)
betas <- list()
groups <- as.character(unique(meta(pseq)$group))
for (g in groups) {
df <- subset(meta(pseq), group == g)
beta <- c()
for (subj in df$subject) {
# Pick the samples for this subject
dfs <- subset(df, subject == subj)
# Check that the subject has two time points
if (nrow(dfs) == 2) {
s <- as.character(dfs$sample)
# Here with just two samples we can calculate the
# beta diversity directly
beta[[subj]] <- divergence(abundances(pseq)[, s[[1]]],abundances(pseq)[, s[[2]]],method = "bray")
}
}
betas[[g]] <- beta
}
# boxplot
df <- as.data.frame(unlist(betas))
s<- rownames(df)
si<- as.data.frame(s)
si<- separate(si, s, into = c('names','s'))
df1<- bind_cols(df, si)
rownames(df1)<- df1$s ; df1$s<- NULL
p<- ggplot(df1, aes(x = names, y = `unlist(betas)`))+ geom_boxplot() + ylab('') + xlab('')
plot(p)
library(MicrobeDS)
BiocManager::install('MicrobeDS')
devtools::install_github('twbattaglia/MicrobeDS')
#devtools::install_github('twbattaglia/MicrobeDS')
library(MicrobeDS)
library(microbiome)
library(dplyr)
library(vegan)
data(MovingPictures)
# Pick the metadata for this subject and sort the
# samples by time
# Pick the data and modify variable names
pseq <- MovingPictures
s <- "F4" # Selected subject
b <- "UBERON:feces" # Selected body site
# Let us pick a subset
pseq <- subset_samples(MovingPictures, host_subject_id == s & body_site == b)
# Rename variables
sample_data(pseq)$subject <- sample_data(pseq)$host_subject_id
sample_data(pseq)$sample <- sample_data(pseq)$X.SampleID
# Tidy up the time point information (convert from dates to days)
sample_data(pseq)$time <- as.numeric(as.Date(gsub(" 0:00", "", as.character(sample_data(pseq)$collection_timestamp)), "%m/%d/%Y") - as.Date("10/21/08", "%m/%d/%Y"))
# Order the entries by time
df <- meta(pseq) %>% arrange(time)
# Calculate the beta diversity between each time point and
# the baseline (first) time point
beta <- c() # Baseline similarity
s0 <- subset(df, time == 0)$sample
# Let us transform to relative abundance for Bray-Curtis calculations
a <- abundances(transform(pseq, "compositional"))
for (tp in df$time[-1]) {
# Pick the samples for this subject
# If the same time point has more than one sample,
# pick one at random
st <- sample(subset(df, time == tp)$sample, 1)
# Beta diversity between the current time point and baseline
b <- vegdist(rbind(a[, s0], a[, st]), method = "bray")
# Add to the list
beta <- rbind(beta, c(tp, b))
}
colnames(beta) <- c("time", "beta")
beta <- as.data.frame(beta)
theme_set(theme_bw(20))
library(ggplot2)
p <- ggplot(beta, aes(x = time, y = beta)) +
geom_point() +
geom_line() +
geom_smooth() +
labs(x = "Time (Days)", y = "Beta diversity (Bray-Curtis)")
print(p)
pseq <- peerj32$phyloseq
b.pla <- divergence(subset_samples(pseq, group == "Placebo"),
apply(abundances(subset_samples(pseq, group == "Placebo")), 1, median))
b.lgg <- divergence(subset_samples(pseq, group == "LGG"),
apply(abundances(subset_samples(pseq, group == "LGG")), 1, median))
boxplot(list(LGG = b.lgg, Placebo = b.pla))
b.lgg
b.pla
boxplot(list(LGG = b.lgg, Placebo = b.pla))
df <- as.data.frame(b.pla, b.lgg)
b.lgg
length(b.lgg)
length(b.pla)
dim(b.lgg)
rbind(b.lgg, b.pla)
v<-rbind(b.lgg, b.pla)
View(v)
View(as.data.frame(v))
v<-as.data.frame(rbind(b.lgg, b.pla))
v<-as.data.frame(rbind( b.pla,b.lgg))
View(v)
view(b.lgg)
view(b.pla)
v<-as.data.frame(cbind( b.pla,b.lgg))
v<-as.data.frame(bind_cols( b.pla,b.lgg))
View(v)
unlist(b.lgg)
unlist(b.pla)
view(unlist(b.lgg))
view(unlist(b.pla))
LGG<- unlist(b.lgg)
Placebo<- unlist(b.pla)
LGG$'LGG'<- LGG
View(LGG)
View(LGG)
View(LGG)
LGG$'LGG'<- unlist(b.lgg)
View(LGG)
View(LGG)
View(LGG)
df<-list(LGG = b.lgg, Placebo = b.pla)
View(df)
df1<- as.data.frame(unlist(df))
View(df1)
s<- rownames(df1)
si<- as.data.frame(s)
si<- separate(si, s, into = c('names','s'))
si<- separate(si, s, into = c('names','s'))
si<- separate(si, s, into = c('names','s'), by = '_')
si<- separate(si, s, into = c('names','s'), by = '.')
si<- separate(si, s, into = c('names','s'), sep = '_')
si
si<- separate(si, s, into = c('names','s'), sep = '.')
si
df1$n<- s
df1 %>% separate(n, c('na','sa'))
df1 %>% separate(n, c('na','sa'), sep = '.')
dd<-df1 %>% separate(n, c('na','sa'), sep = '.')
View(dd)
dd<-df1 %>% separate(n, c('na','sa'), sep = '_')
# Load libraries
library(microbiome)
library(ggplot2)
library(dplyr)
# Probiotics intervention example data
data(peerj32) # Source: https://peerj.com/articles/32/
pseq <- peerj32$phyloseq # Rename the example data
p <- boxplot_abundance(pseq, x = "time", y = "Akkermansia", line = "subject") + scale_y_log10()
print(p)
p <- boxplot_abundance(pseq, x = "time", y = "Akkermansia", line = "subject") + scale_y_log10()
print(p)
library(MASS)
# Analyse specific taxa
tax <- "Akkermansia"
# Pick the signal (abundance) for this tax
sample_data(pseq)$signal <- get_sample(pseq, tax)
# Negative binomial test with group and gender included
res <- glm.nb(signal ~ group + sex, data = meta(pseq))
# Show the results
print(coef(summary(res)))
library(tid)
library(tidyr)
library(MASS)
library(tidyr)
# Analyse specific taxa
tax <- "Akkermansia"
# Pick the signal (abundance) for this tax
sample_data(pseq)$signal <- get_sample(pseq, tax)
# Negative binomial test with group and gender included
res <- glm.nb(signal ~ group + sex, data = meta(pseq))
# Show the results
print(coef(summary(res)))
rmarkdown::render('Negativebinomial.Rmd','all')

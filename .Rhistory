library(netresponse)
# Generate simulated data
res <- generate.toydata(Dim = 2)
D <- res$data
component.means <- res$means
component.sds   <- res$sds
# Fit the mixture
m <- mixture.model(D, mixture.method = "vdp", pca.basis = FALSE)
# Plot the data, and indicate estimated modes with colors.
# If data dimensionality exceeds 2,
# the results are visualized on PCA projection
# (with pca.basis = TRUE the data is projected on PCA coordinates;
# without loss of information. This trick can help to avoid overlearning
# as the variational mixture relies
# on diagonal covariance matrices, so the ellipsoidal axes of the
# Gaussian modes are parallel to the coordinate axes.)
p <- PlotMixtureMultivariate(D, means = m$mu, sds = m$sd, ws = m$w, modes = apply(m$qofz,1,which.max))
p <- PlotMixtureMultivariate(D, means = m$mu, sds = m$sd, ws = m$w, modes = apply(m$qofz,1,which.max))
library(netresponse)
# Generate simulated data
res <- generate.toydata(Dim = 2)
D <- res$data
component.means <- res$means
component.sds   <- res$sds
# Fit the mixture
m <- mixture.model(D, mixture.method = "vdp", pca.basis = FALSE)
# Plot the data, and indicate estimated modes with colors.
# If data dimensionality exceeds 2,
# the results are visualized on PCA projection
# (with pca.basis = TRUE the data is projected on PCA coordinates;
# without loss of information. This trick can help to avoid overlearning
# as the variational mixture relies
# on diagonal covariance matrices, so the ellipsoidal axes of the
# Gaussian modes are parallel to the coordinate axes.)
p <- PlotMixtureMultivariate(D, means = m$mu, sds = m$sd, ws = m$w, modes = apply(m$qofz,1,which.max))
print(p)
# Generate simulated bimodal univariate data
x <- c(rnorm(200), rnorm(200, mean = 5))
# Variational Dirichlet process univariate Gaussian mixture
m <- mixture.model(x, mixture.method = "vdp", max.responses = 10)
# Plot the data and estimated modes
p <- PlotMixtureUnivariate(x, means = m$mu, sds = m$sd, ws = m$w, binwidth = 0.1, qofz = m$qofz)
print(p)
print(p)
# Example data
data("dietswap")
library(FD)
d <- gowdis(as(sample_data(dietswap), "data.frame"))
plot(hclust(d))
library(ggplot2)
library(rvg)
library(ggiraph)
x <- microbiome::transform(atlas1006, "compositional")
mytheme_main <- theme( panel.background = element_blank(),
panel.grid.major = element_line(colour = "#dddddd"),
axis.ticks = element_line(colour = "#dddddd") )
mytheme_map <- theme(
panel.background = element_blank(), axis.title.x = element_blank(),
axis.text = element_blank(), axis.line.x = element_blank(),
axis.line.y = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank() )
df <- as(sample_data(x), "data.frame")
df$Dialister <- get_sample(x, "Dialister")
df$Prevotella <- get_sample(x, "Prevotella melaninogenica et rel.")
df$sample <- row.names(df)
# geom_point_interactive example
gg_point_1 <- ggplot(df, aes(x = Prevotella, y = Dialister,
color = age, tooltip = sample) ) +
geom_point_interactive(size=3)
# htmlwidget call
# original code
#ggiraph(code = {print(gg_point_1 + mytheme_main)}, width = 7, height = 6)
ggiraph::ggiraph(code = {print(gg_point_1 + mytheme_main)}, width = 1, height = 6)
library(ggplot2)
library(rvg)
library(ggiraph)
x <- microbiome::transform(atlas1006, "compositional")
mytheme_main <- theme( panel.background = element_blank(),
panel.grid.major = element_line(colour = "#dddddd"),
axis.ticks = element_line(colour = "#dddddd") )
mytheme_map <- theme(
panel.background = element_blank(), axis.title.x = element_blank(),
axis.text = element_blank(), axis.line.x = element_blank(),
axis.line.y = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank() )
df <- as(sample_data(x), "data.frame")
df$Dialister <- get_sample(x, "Dialister")
df$Prevotella <- get_sample(x, "Prevotella melaninogenica et rel.")
df$sample <- row.names(df)
# geom_point_interactive example
gg_point_1 <- ggplot(df, aes(x = Prevotella, y = Dialister,
color = age, tooltip = sample) ) +
geom_point_interactive(size=3)
# htmlwidget call
# original code
#ggiraph(code = {print(gg_point_1 + mytheme_main)}, width = 7, height = 6)
ggiraph::ggiraph(code = {print(gg_point_1 + mytheme_main)}, width = 1, height = 6)
library(ggplot2)
library(rvg)
library(ggiraph)
x <- microbiome::transform(atlas1006, "compositional")
mytheme_main <- theme( panel.background = element_blank(),
panel.grid.major = element_line(colour = "#dddddd"),
axis.ticks = element_line(colour = "#dddddd") )
mytheme_map <- theme(
panel.background = element_blank(), axis.title.x = element_blank(),
axis.text = element_blank(), axis.line.x = element_blank(),
axis.line.y = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank() )
df <- as(sample_data(x), "data.frame")
df$Dialister <- get_sample(x, "Dialister")
df$Prevotella <- get_sample(x, "Prevotella melaninogenica et rel.")
df$sample <- row.names(df)
# geom_point_interactive example
gg_point_1 <- ggplot(df, aes(x = Prevotella, y = Dialister,
color = age, tooltip = sample) ) +
geom_point_interactive(size=3)
# htmlwidget call
# original code
#ggiraph(code = {print(gg_point_1 + mytheme_main)}, width = 7, height = 6)
ggiraph::ggiraph(code = {print(gg_point_1 + mytheme_main)}, width = 1, height = 6)
library(ggplot2)
library(rvg)
library(ggiraph)
x <- microbiome::transform(atlas1006, "compositional")
mytheme_main <- theme( panel.background = element_blank(),
panel.grid.major = element_line(colour = "#dddddd"),
axis.ticks = element_line(colour = "#dddddd") )
mytheme_map <- theme(
panel.background = element_blank(), axis.title.x = element_blank(),
axis.text = element_blank(), axis.line.x = element_blank(),
axis.line.y = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank() )
df <- as(sample_data(x), "data.frame")
df$Dialister <- get_sample(x, "Dialister")
df$Prevotella <- get_sample(x, "Prevotella melaninogenica et rel.")
df$sample <- row.names(df)
# geom_point_interactive example
gg_point_1 <- ggplot(df, aes(x = Prevotella, y = Dialister,
color = age, tooltip = sample) ) +
geom_point_interactive(size=3)
# htmlwidget call
# original code
#ggiraph(code = {print(gg_point_1 + mytheme_main)}, width = 7, height = 6)
ggiraph::ggiraph(code = {print(gg_point_1 + mytheme_main)}, width = 1, height = 6)
library(ggplot2)
library(rvg)
library(ggiraph)
x <- microbiome::transform(atlas1006, "compositional")
mytheme_main <- theme( panel.background = element_blank(),
panel.grid.major = element_line(colour = "#dddddd"),
axis.ticks = element_line(colour = "#dddddd") )
mytheme_map <- theme(
panel.background = element_blank(), axis.title.x = element_blank(),
axis.text = element_blank(), axis.line.x = element_blank(),
axis.line.y = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank() )
df <- as(sample_data(x), "data.frame")
df$Dialister <- get_sample(x, "Dialister")
df$Prevotella <- get_sample(x, "Prevotella melaninogenica et rel.")
df$sample <- row.names(df)
# geom_point_interactive example
gg_point_1 <- ggplot(df, aes(x = Prevotella, y = Dialister,
color = age, tooltip = sample) ) +
geom_point_interactive(size=3)
# htmlwidget call
# original code
#ggiraph(code = {print(gg_point_1 + mytheme_main)}, width = 7, height = 6)
ggiraph::ggiraph(code = {print(gg_point_1 + mytheme_main)}, width = 1, height = 6)
#ggiraph(code = {print(gg_point_1 + mytheme_main)}, width = 7, height = 6)
ggiraph::ggiraph(code = {print(gg_point_1 + mytheme_main)}, width = 1, height = 6)
# Define example data path (replace here data.directory with your own path)
library(microbiome)
data.directory <- system.file("extdata", package = "microbiome")
#print(data.directory)
library(microbiome)
# Install additional dependencies
#source("http://www.bioconductor.org")
BiocManager::install("DBI")
BiocManager::install("RPA")
BiocManager::install("svDialogs")
library(devtools) # Load the devtools package
install_github("microbiome/HITChipDB") # Install the package
# Also install RMySQL, multicore and tcltk !
source("http://www.bioconductor.org")
library(HITChipDB)
pseq <- HITChipDB::read_hitchip(data.directory, method = "frpa")$pseq
p <- plot_potential(res$res) + xlab("Age") + ylab("Diversity")
plot_rda_bagged(res)
plot(rda.result, choices = c(1,2), type = "points", pch = 15, scaling = 3, cex = 0.7, col = metadata$time)
points(rda.result, choices = c(1,2), pch = 15, scaling = 3, cex = 0.7, col = metadata$time)
p5 <- ordihull(rda.result, metadata$time, scaling = 3, label = TRUE)
print(p5)
plot(p5)
p5
plot(rda.result, choices = c(1,2), type = "points", pch = 15, scaling = 3, cex = 0.7, col = metadata$time)
points(rda.result, choices = c(1,2), pch = 15, scaling = 3, cex = 0.7, col = metadata$time)
ordihull(rda.result, metadata$time, scaling = 3, label = TRUE)
plot(rda.result, choices = c(1,2), type = "points", pch = 15, scaling = 3, cex = 0.7, col = metadata$time)
points(rda.result, choices = c(1,2), pch = 15, scaling = 3, cex = 0.7, col = metadata$time)
ordihull(rda.result, metadata$time, scaling = 3, label = TRUE)
permutest(rda.result)
# Pick microbiota profiling data from the phyloseq object
otu <- abundances(pseq.trans)
# Sample annotations
metadata <- meta(pseq.trans)
# RDA with confounders using the vegan function
rda.result2 <- vegan::rda(t(otu) ~ metadata$time + Condition(metadata$subject + metadata$gender))
source(system.file("extdata/plot_longitudinal.R", package = "microbiome"))
rmarkdown::render('Experimental.rmd','all')
rmarkdown::render('README.rmd','md_document')
rmarkdown::render('index.rmd','all')
# Handle citations
require(knitcitations)
require(bookdown)
# cleanbib()
# options("citation_format" = "pandoc")
bib <- read.bibtex("bibliography.bib")
# Handle citations
require(knitcitations)
install.packages('knitcitations')
library(knitcitations)
library(knitcitations)
install.packages('bibtex')
library(knitcitations)
library(knitcitations)
# Handle citations
require(knitcitations)
require(bookdown)
# cleanbib()
# options("citation_format" = "pandoc")
bib <- read.bibtex("bibliography.bib")
#opts_chunk$set(fig.width=4, fig.height=3, par=TRUE, out.width='2in', fig.pos='H')
library(knitr)
knitr::opts_chunk$set(fig.path = "figure/", dev="CairoPNG")
#----------------------------
# CSS Style
### Import the style from CSS file 'css_path'
style <- paste(readLines("bioc.css"), collapse = "\n")
opts_knit$set(self.contained = TRUE,
upload.fun = image_uri, ## optional
header = c(highlight = style))
theme_set(theme_bw(40))
df <- as.data.frame(t(sapply(times, identity)))
df$file <- rownames(df)
dfm <- as_tibble(melt(df, id = "file")) %>%
filter(variable %in% c("user.self", "elapsed")) %>%
arrange(value) %>%
mutate(file = factor(file, levels = unique(file)))
p <- ggplot(dfm, aes(x = file, fill = variable, y = value)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
coord_flip() + labs(x = "", y = "Time (s)")
print(p)
rmarkdown::render('info.rmd','all')
library(knitr)
theme_set(theme_bw(40))
library(knitr)
theme_set(theme_bw(40))
df <- as.data.frame(t(sapply(times, identity)))
df$file <- rownames(df)
dfm <- as_tibble(melt(df, id = "file")) %>%
filter(variable %in% c("user.self", "elapsed")) %>%
arrange(value) %>%
mutate(file = factor(file, levels = unique(file)))
p <- ggplot(dfm, aes(x = file, fill = variable, y = value)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
coord_flip() + labs(x = "", y = "Time (s)")
print(p)
rmarkdown::render('info.rmd','all')
rmarkdown::render('info.rmd','all')
times <- c()
# Render all files
for (myfile in fs) {
times[[myfile]] <- system.time(rmarkdown::render(myfile))
}
library(devtools)
library(gridExtra)
library(dplyr)
library(reshape2)
library(tidyr)
library(cowplot)
library(ggplot2)
# Defaults
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.path = "figs/")
knitr::opts_chunk$set(dev="CairoPNG")
knitr::opts_chunk$set(cache=FALSE)
# http://derekogle.com/fishR/2015-09-17-Figure-Table-Captions-in-Markdown
library(captioner)
tbls <- captioner(prefix="Table")
figs <- captioner(prefix="Fig.")
library(rstan)
library(rstanarm)
install.packages('rstanarm')
library(rstan)
library(rstanarm)
install.packages('zoo')
library(rstanarm)
install.packages('xts')
library(rstanarm)
library(rstanarm)
library(rstanarm)
library(rstan)
library(rstanarm)
# We set the tipping point manually in this example
# Bimodality hotplot:
# Consider a unique sample from each subject: the baseline time point
p <- hotplot(pseq0, tax, tipping.point = 0.005)
print(p)
# Visualize bimodality
pv <- plot_tipping(pseq, tax, tipping.point = 0.005)
# Load the example data
library(microbiome)
library(dplyr)
data(atlas1006)
# Rename the example data
pseq <- atlas1006
# Focus on specific DNA extraction method
pseq <- pseq %>% subset_samples(DNA_extraction_method == "r")
# Keep prevalent taxa (HITChip signal >3 in >20 percent of the samples)
pseq <- core(pseq, detection = 10^3, prevalence = .2)
# Use relative abundances
pseq <- microbiome::transform(pseq, "compositional")
# For cross-sectional analysis, include
# only the zero time point:
pseq0 <- subset_samples(pseq, time == 0)
# Bimodality is better estimated from log10 abundances
pseq0.log10 <- microbiome::transform(pseq0, "log10")
bimodality <- bimodality(pseq0.log10, method = "potential_analysis", bs.iter = 20)
# Pick the most and least bimodal taxa as examples
unimodal  <- names(sort(bimodality))[[1]]
bimodal  <- rev(names(sort(bimodality)))[[1]]
# Visualize population frequencies
library(ggplot2)
theme_set(theme_bw(20))
p1 <- plot_density(pseq, variable = unimodal, log10 = TRUE)
p2 <- plot_density(pseq, variable = bimodal,  log10 = TRUE)
library(gridExtra)
library(ggplot2)
grid.arrange(p1, p2, nrow = 1)
# Log10 abundance for a selected taxonomic group
tax <- bimodal
# Detect tipping points detection at log10 abundances
x <- log10(abundances(pseq)[tax,])
# Bootstrapped potential analysis to identify potential minima
set.seed(3432)
potential.minima <- potential_analysis(log10(abundances(pseq)[tax,]), bs.iter = 50)$minima
# Same with earlywarnings package (without bootstrap ie. less robust)
# library(earlywarnings)
# res <- livpotential_ews(x)$min.points
# Identify the potential minimum location as a tipping point candidate
# and cast the tipping back to the original (non-log) space:
tipping.point <- 10^potential.minima
# We set the tipping point manually in this example
# Bimodality hotplot:
# Consider a unique sample from each subject: the baseline time point
p <- hotplot(pseq0, tax, tipping.point = 0.005)
print(p)
# Visualize bimodality
pv <- plot_tipping(pseq, tax, tipping.point = 0.005)
print(pv)
pseq0
tax
# Log10 abundance for a selected taxonomic group
tax <- bimodal
# Detect tipping points detection at log10 abundances
x <- log10(abundances(pseq)[tax,])
# Bootstrapped potential analysis to identify potential minima
set.seed(3432)
potential.minima <- potential_analysis(log10(abundances(pseq)[tax,]), bs.iter = 50)$minima
# Same with earlywarnings package (without bootstrap ie. less robust)
# library(earlywarnings)
# res <- livpotential_ews(x)$min.points
# Identify the potential minimum location as a tipping point candidate
# and cast the tipping back to the original (non-log) space:
tipping.point <- 10^potential.minima
# We set the tipping point manually in this example
# Bimodality hotplot:
# Consider a unique sample from each subject: the baseline time point
p <- hotplot(pseq0, tax, tipping.point = 0.005)
print(p)
# Visualize bimodality
pv <- plot_tipping(pseq, tax, tipping.point = 0.005)
print(pv)
bimodal
# We set the tipping point manually in this example
# Bimodality hotplot:
# Consider a unique sample from each subject: the baseline time point
p <- hotplot(pseq0, Dialister, tipping.point = 0.005)
# Bimodality hotplot:
# Consider a unique sample from each subject: the baseline time point
p <- hotplot(pseq0, tax, tipping.point = 0.005)
print(p)
p
bimodal  <- rev(names(sort(bimodality)))[[1]]
bimodal
bimodality
function('microbiome')
functions(microbiome)
library(microbiome)
all(microbio_me_qiime())
library(dplyr)
lsf.str('package:microbiome')
f<- as.data.frame(lsf.str('package:microbiome'))
(lsf.str('package:microbiome'))
f<-(lsf.str('package:microbiome'))
f<-as.data.frame(f)
save(f, ''fd.txt)
save(f, 'fd.txt')
save('f.txt', file = f)
ls('package:microbiome')
l<-ls('package:microbiome')
as.data.frame(l)
l<-as.data.frame(l)
view(l)
save(l, 'l.txt')
save('l.txt', l)
library(xlsx)
install.packages('xlsx')
install.packages('xlsx')
library(xlsx)
library(xlsx)
call: fun(libname, xlsx)
library(xlsx)
remove.packages("xlsx", lib="~/R/win-library/3.6")
library(xlsx)
install.packages('xlsx')
library(xlsx)
library(rJava)
library(rJava)
install.packages('rjava')
install.packages('rJava')
library(rJava)
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7') # for 64-bit version
library(rJava)
write_excel_csv(l, 'l.csv')
package.version('microbiome')
package_version('microbiome')
package_version(microbiome)
package_info('microbiome')
tipping.point
tax
class(tax)
pseq0
taxa(pseq0)
d<-taxa(pseq0)
d<-as.data.frame(d)
d$d
pseq
aggregate_taxa(pseq, 'Prevotella')
aggregate_taxa(pseq, 'Genus')
pseq0
rank(pseq)
phyloseq::rank.names(pseq)
phyloseq::rank_names(pseq)
atlas1006
k<-aggregate(atlas1006, 'Genus')
k<-aggregate_taxa(atlas1006, 'Genus')
k
k<-aggregate_taxa(atlas1006, 'Prevotella')
tax(atlas1006)
microbiome::taxa(atlas1006)
k<-microbiome::taxa(atlas1006)
class(k)
view(as.data.frame(k))
k<-as.data.frame(k)
k$k
k
k['Dialister']
k[,'Dialister']
k[,Dialister]
taxa(atlas1006)$'Dialister'
View(k)
pse<-atlas1006
pse<-pse %>% subset_samples(taxa(pse)=='Dialister')
pse0<-subset_samples(pse, time == 0)
pse0.log10<-microbiome::transform(pse0, 'log10')
pse0.log10<-microbiome::transform(pse0, 'log10(1+x)')
pse0
atlas1006
pse0.log10<-microbiome::transform(pse0, 'log10')
bimod<-bimodality(pse0.log10, method = 'potential_analysis', bs.iter = 20)
bimod<-bimodality(pse0, method = 'potential_analysis', bs.iter = 20)
bimod<-bimodality(pse0.log10, method = 'potential_analysis', bs.iter = 10)
?bimodality
bimod<-bimodality(pse0.log10, method = 'potential_analysis', bs.iter = 20, verbose = T)
pse0<-subset_samples(pse, time == 0)
pse0.log10<-microbiome::transform(pse0, 'log10')
bimod<-microbiome::bimodality(pse0.log10, method = 'potential_analysis', bs.iter = 20)
pse0
pseq0
bimod<-microbiome::bimodality(pse0.log10, method = 'potential_analysis', bs.iter = 100)
microbiome::bimodality(pse0, 'potential_analysis', bs.iter = 20)
pse<-pse %>% subset_samples(taxa(pse)=='Prevotella')
View(k)
view(as.data.frame(taxa(pseq0)))
rank.names(atlas1006)
rank_names(atlas1006)
pse<-pse %>% subset_samples(taxa(pse)$Phylum=='Prevotella')
rm(pse)
pse
pse<-atlas1006
pse<-pse %>% subset_species(taxa(pse)=='Prevotella')
pse<-pse %>% subset_taxa(taxa(pse)=='Prevotella')
pse<-pse %>% subset_samples(taxa(pse)=='Prevotella')
pse<-pse %>% subset_samples(taxa(pse)=='Prevotella melaninogenica et rel')
p<-aggregate_taxa(pse, 'Phylum')
pse<-p %>% subset_samples(taxa(p)=='Prevotella melaninogenica et rel')
pse<-p %>% subset_samples(taxa(p)=='Prevotella')
pse<-p %>% subset_samples(taxa(p)==Prevotella)
pse<-p %>% subset_samples(taxa(p)==Prevotella melaninogenica et rel)

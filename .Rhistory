core.taxa.standard <- core_members(pseq.rel, detection = 0, prevalence = 50/100)
pseq.core <- core(pseq.rel, detection = 0, prevalence = .5)
core.taxa <- taxa(pseq.core)
class(core.taxa)
# get the taxonomy data
tax.mat <- tax_table(pseq.core)
tax.df <- as.data.frame(tax.mat)
# add the OTus to last column
tax.df$OTU <- rownames(tax.df)
# select taxonomy of only
# those OTUs that are core memebers based on the thresholds that were used.
core.taxa.class <- dplyr::filter(tax.df, rownames(tax.df) %in% core.taxa)
knitr::kable(head(core.taxa.class))
core.abundance <- sample_sums(core(pseq.rel, detection = .001, prevalence = .95))
# With compositional (relative) abundances
det <- c(0, 0.1, 0.5, 2, 5, 20)/100
prevalences <- seq(.05, 1, .05)
plot_core(pseq.rel, prevalences = prevalences, detections = det, plot.type = "lineplot") + xlab("Relative Abundance (%)")
# Core with compositionals:
prevalences <- seq(.05, 1, .05)
detections <- 10^seq(log10(1e-5), log10(.2), length = 10)
# Also define gray color palette
gray <- gray(seq(0,1,length=5))
p <- plot_core(pseq.rel, plot.type = "heatmap", colours = gray,
prevalences = prevalences, detections = detections, min.prevalence = .5) +
xlab("Detection Threshold (Relative Abundance (%))")
print(p)
# Same with the viridis color palette
# color-blind friendly and uniform
# options: viridis, magma, plasma, inferno
# https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html
# Also discrete=TRUE versions available
library(viridis)
print(p + scale_fill_viridis())
library(RColorBrewer)
library(knitr)
# Core with absolute counts and vertical view:
# and minimum population prevalence (given as percentage)
detections <- 10^seq(log10(1), log10(max(abundances(pseq.2))/10), length = 10)
# Import output CSV files generated by write_phyloseq
pseq1 <- read_phyloseq(otu.file, taxonomy.file, metadata.file, type = "simple")
# Data citation doi: 10.1038/ncomms5344
library(microbiome)
data(atlas1006)
print(atlas1006)
# Data citation doi: 10.1038/ncomms7342
data(dietswap)
print(dietswap)
# Data citation doi: 10.7717/peerj.32
data(peerj32)
print(names(peerj32))
# Data citation doi: 10.1038/ncomms7342
data(dietswap)
print(dietswap)
m0 <- lmer(signal ~ Diet_Fat + (1|Rat), data = me, REML = TRUE, control = lmerControl(check.nobs.vs.nlev = 'ignore', check.nobs.vs.nRE = 'ignore'))
library(microbiome)
library(lme4)
me<-meta(phyl.genus)
library(readxl)
library(readr)
library(tibble)
library(phyloseq)
library(stringr)
library(microbiome)
da<-'Otut_abundanssit_metadata_ok.xlsx'
otal<-read_excel(da, sheet = 'OTU table')
#ken<-read_excel(da, sheet = 'Genus')
#ken<-as.data.frame(ken)
#genus1<-otal[-seq(1,7)]
library(dplyr)
#genus<-genus1[-2]
#genus<-as.data.frame(genus)
#genus$...8 <- genus$...8 %>% as.character
#collapsed_genus<-lapply(unique(genus$...8), function(i){
#  collapsed <- genus %>%
#    filter(...8 == i) %>%
#    dplyr::select(- ...8) %>%
#    colSums()
#  return(collapsed)
#}) %>%
#  do.call(rbind, .) %>%
#  as.data.frame() %>%
#  mutate(...8 = unique(genus$...8))
#View(collapsed_genus)
####
#dim(collapsed_genus)
#collapsed_genus<-na.omit(collapsed_genus)
#b<-collapsed_genus$...8
#rownames(collapsed_genus)<-b; collapsed_genus$...8<-NULL
#collapsed_genus<-as.matrix(collapsed_genus)
#####
#gen_ta<-otu_table(collapsed_genus, taxa_are_rows = T)
##############
metada<-read_excel(da, sheet = 'Metadata')
#View(otal)
ot<-otal[,-seq(3,9)]; ot$ID <- NULL
#View(ot)
tax<-otal[,-seq(10,86)]; tax$ID<- NULL
#View(tax)
cona<-c('Name','Kingdom','Phylum','Class','Order','Family','Genus','Species')
colnames(tax)<-cona
#View(colnames(ot))
#ot<-as.data.frame(ot)
idd<-ot$Name
#View(id)
#View(metada)
#metada$Group_Number<-metada$`Ryhmä nro`
#metada<-metada[,-3]
tax<-as.data.frame(tax)
rownames(tax)<-tax$Name; tax$Name <-NULL
#tax<-tax[,-1]
#ot<-ot[,-c(1,2)]
rownames(ot)<-idd; ot$Name <-NULL
ta<-tax_table(as.matrix(tax))
otuu<-otu_table(ot, taxa_are_rows = T)
d<-colnames(ot)
#metada<-metada[,-1]
#############################################
metada$Diet_Supplement<-metada$Diet
metada$Diet[metada$Diet=="High-fat + XOS"]<-"High-fat"
metada$Diet[metada$Diet=="Low-fat + XOS"]<-"Low-fat"
metada$Diet_Supplement[metada$Diet_Supplement=="High-fat"] <- "Placebo"
metada$Diet_Supplement[metada$Diet_Supplement=="Low-fat"] <- "Placebo"
metada$Diet_Supplement[metada$Diet_Supplement=="High-fat + XOS"| metada$Diet_Supplement=="Low-fat + XOS" ]<-"XOS"
metada$Diet_Supplement <- factor(metada$Diet_Supplement, levels = c("Placebo", "XOS"))
metada$Diet_Fat <- metada$Diet; metada$Diet <- NULL
metada$Diet_Fat <- gsub("-fat", "", metada$Diet_Fat)
metada$Diet_Fat <- factor(metada$Diet_Fat, levels = c("Low", "High"))
metada$Group_Num<- factor(metada$`Ryhmä nro`)
metada$`Ryhmä nro`<- NULL
metada$Location  <- factor(metada$`Suolen osa`); metada$`Suolen osa`<- NULL
#metadata_A$Sequencing.ID <- factor(metadata_A$`Sekvensointi ID`);
metada$`Sekvensointi ID`<- NULL
metada$Rat <- factor(metada$`Rotta ID`); metada$`Rotta ID`<- NULL
###################
#gen<-read_excel(da, sheet = 'Genus')
#ge1<-as.matrix(gen)
#ic<-ge1[,1]
#rownames(ge1)<-ic
rownames(metada)<-d
#######################################
sam<-sample_data(metada)
phyl<-phyloseq(otuu, ta, sam)
#phyl.genus<-phyloseq(gen_ta, ta, sam)
#pseq<-phyl
saveRDS(phyl, file = "data_processed/phyloseq.Rds")
phyl.genus<-aggregate_taxa(phyl, 'Genus')
library(readxl)
library(readr)
library(tibble)
library(phyloseq)
library(stringr)
library(microbiome)
da<-'Otut_abundanssit_metadata_ok.xlsx'
otal<-read_excel(da, sheet = 'OTU table')
#ken<-read_excel(da, sheet = 'Genus')
#ken<-as.data.frame(ken)
#genus1<-otal[-seq(1,7)]
library(dplyr)
#genus<-genus1[-2]
#genus<-as.data.frame(genus)
#genus$...8 <- genus$...8 %>% as.character
#collapsed_genus<-lapply(unique(genus$...8), function(i){
#  collapsed <- genus %>%
#    filter(...8 == i) %>%
#    dplyr::select(- ...8) %>%
#    colSums()
#  return(collapsed)
#}) %>%
#  do.call(rbind, .) %>%
#  as.data.frame() %>%
#  mutate(...8 = unique(genus$...8))
#View(collapsed_genus)
####
#dim(collapsed_genus)
#collapsed_genus<-na.omit(collapsed_genus)
#b<-collapsed_genus$...8
#rownames(collapsed_genus)<-b; collapsed_genus$...8<-NULL
#collapsed_genus<-as.matrix(collapsed_genus)
#####
#gen_ta<-otu_table(collapsed_genus, taxa_are_rows = T)
##############
metada<-read_excel(da, sheet = 'Metadata')
#View(otal)
ot<-otal[,-seq(3,9)]; ot$ID <- NULL
#View(ot)
tax<-otal[,-seq(10,86)]; tax$ID<- NULL
#View(tax)
cona<-c('Name','Kingdom','Phylum','Class','Order','Family','Genus','Species')
colnames(tax)<-cona
#View(colnames(ot))
#ot<-as.data.frame(ot)
idd<-ot$Name
#View(id)
#View(metada)
#metada$Group_Number<-metada$`Ryhmä nro`
#metada<-metada[,-3]
tax<-as.data.frame(tax)
rownames(tax)<-tax$Name; tax$Name <-NULL
#tax<-tax[,-1]
#ot<-ot[,-c(1,2)]
rownames(ot)<-idd; ot$Name <-NULL
ta<-tax_table(as.matrix(tax))
otuu<-otu_table(ot, taxa_are_rows = T)
d<-colnames(ot)
#metada<-metada[,-1]
#############################################
metada$Diet_Supplement<-metada$Diet
metada$Diet[metada$Diet=="High-fat + XOS"]<-"High-fat"
metada$Diet[metada$Diet=="Low-fat + XOS"]<-"Low-fat"
metada$Diet_Supplement[metada$Diet_Supplement=="High-fat"] <- "Placebo"
metada$Diet_Supplement[metada$Diet_Supplement=="Low-fat"] <- "Placebo"
metada$Diet_Supplement[metada$Diet_Supplement=="High-fat + XOS"| metada$Diet_Supplement=="Low-fat + XOS" ]<-"XOS"
metada$Diet_Supplement <- factor(metada$Diet_Supplement, levels = c("Placebo", "XOS"))
metada$Diet_Fat <- metada$Diet; metada$Diet <- NULL
metada$Diet_Fat <- gsub("-fat", "", metada$Diet_Fat)
metada$Diet_Fat <- factor(metada$Diet_Fat, levels = c("Low", "High"))
metada$Group_Num<- factor(metada$`Ryhmä nro`)
metada$`Ryhmä nro`<- NULL
metada$Location  <- factor(metada$`Suolen osa`); metada$`Suolen osa`<- NULL
#metadata_A$Sequencing.ID <- factor(metadata_A$`Sekvensointi ID`);
metada$`Sekvensointi ID`<- NULL
metada$Rat <- factor(metada$`Rotta ID`); metada$`Rotta ID`<- NULL
###################
#gen<-read_excel(da, sheet = 'Genus')
#ge1<-as.matrix(gen)
#ic<-ge1[,1]
#rownames(ge1)<-ic
rownames(metada)<-d
#######################################
sam<-sample_data(metada)
phyl<-phyloseq(otuu, ta, sam)
#phyl.genus<-phyloseq(gen_ta, ta, sam)
#pseq<-phyl
saveRDS(phyl, file = "data_processed/phyloseq.Rds")
phyl.genus<-aggregate_taxa(phyl, 'Genus')
library(readxl)
getwd()
rmarkdown::render('Core.rmd','html_document')
rmarkdown::render('Core.rmd','html_document')
# Render all files
for (myfile in fs) {
times[[myfile]] <- system.time(rmarkdown::render(myfile))
}
# source('init.R')
library(microbiome)
library(phyloseq)
library(netresponse)
library(MASS)
library(dplyr)
library(tidyr)
library(ggplot2)
library(devtools)
library(ggplot2)
library(microbiome)
library(rmarkdown)
library(knitr)
library(knitcitations)
# ---------------------------------------------
# List the Rmd files to render
fs <- sample(list.files(pattern = ".Rmd$")) # Random order
# List rendering options
knitr::opts_chunk$set(fig.path = "figure/", dev="CairoPNG")
times <- c()
# Render all files
for (myfile in fs) {
times[[myfile]] <- system.time(rmarkdown::render(myfile))
}
rmarkdown::render("info.Rmd")
# git add + commit + push
system("git add figure/*")
system("git add *.Rmd")
system("git add *.html")
system("git commit -a -m'homepage update'")
system("git push origin master")
fs <- sample(list.files(pattern = ".Rmd$")) # Random order
knitr::opts_chunk$set(fig.path = "figure/", dev="CairoPNG")
times <- c()
for (myfile in fs) {
times[[myfile]] <- system.time(rmarkdown::render(myfile))
}
library(microbiome)
library(dplyr)
data(peerj32)
pseq <- peerj32$phyloseq
b.pla <- divergence(subset_samples(pseq, group == "Placebo"))
b.lgg <- divergence(subset_samples(pseq, group == "LGG"))
boxplot(list(LGG = b.lgg, Placebo = b.pla))
betas <- list()
groups <- as.character(unique(meta(pseq)$group))
for (g in groups) {
#df <- meta(subset_samples(pseq, group == g))
df <- subset(meta(pseq), group == g)
beta <- c()
for (subj in df$subject) {
# Pick the samples for this subject
dfs <- subset(df, subject == subj)
# Check that the subject has two time points
if (nrow(dfs) == 2) {
s <- as.character(dfs$sample)
# Here with just two samples we can calculate the
# beta diversity directly
beta[[subj]] <- 1-cor(abundances(pseq)[, s[[1]]],
abundances(pseq)[, s[[2]]],
method = "spearman")
}
}
betas[[g]] <- beta
}
boxplot(betas)
data(atlas1006)
pseq <- atlas1006
# Identify subject with the longest time series (most time points)
s <- names(which.max(sapply(split(meta(pseq)$time, meta(pseq)$subject), function (x) {length(unique(x))})))
# Pick the metadata for this subject and sort the
# samples by time
library(dplyr)
df <- meta(pseq) %>% filter(subject == s) %>% arrange(time)
# Calculate the beta diversity between each time point and
# the baseline (first) time point
beta <- c(0, 0) # Baseline similarity
s0 <- subset(df, time == 0)$sample
for (tp in df$time[-1]) {
# Pick the samples for this subject
# If the same time point has more than one sample,
# pick one at random
st <- sample(subset(df, time == tp)$sample, 1)
a <- abundances(pseq)
b <- 1 - cor(a[, s0], a[, st], method = "spearman")
beta <- rbind(beta, c(tp, b))
}
colnames(beta) <- c("time", "beta")
beta <- as.data.frame(beta)
library(ggplot2)
p <- ggplot(beta, aes(x = time, y = beta)) +
geom_point() + geom_line()
print(p)
rmarkdown::render('Betadiversity.rmd','html_document')
rmarkdown::render('Betadiversity.rmd','html_document')
rmarkdown::render('Betadiversity.rmd','html_document')
rmarkdown::render('Diversity.rmd','html_document')
---
title: "Diversity"
author: "Leo Lahti, Sudarshan Shetty et al. `r Sys.Date()`"
bibliography:
- bibliography.bib
output:
rmdformats::readthedown:
#self_contained: true
thumbnails: true
lightbox: true
gallery: true
use_bookdown: false
highlight: haddock
mathjax: local
self_contained: false
---
<!--
%\VignetteEngine{knitr::rmarkdown}
%\VignetteIndexEntry{microbiome tutorial - diversity}
%\usepackage[utf8]{inputenc}
%\VignetteEncoding{UTF-8}
-->
## Global Ecosystem State Variables
Load example data:
```{r divdata, warning=FALSE, message=FALSE, fig.height=3, fig.width=5}
library(microbiome)
library(knitr)
data(dietswap)
pseq <- dietswap
```
## Global indicators
A comprehensive list of global indicators of the ecosystem state can be obtained as follows. This includes various measures of richness, evenness, diversity, dominance, and rarity with default parameters. See the individual functions for more options regarding parameter tuning.
```{r alpha, warning=FALSE, message=FALSE, fig.height=3, fig.width=5, results="asis"}
tab <- alpha(pseq, index = "all")
kable(head(tab))
```
## Alpha diversity
This returns a table with selected diversity indicators. See a separate page on [Beta diversity](Betadiversity.html).
```{r alpha2, warning=FALSE, message=FALSE, fig.height=3, fig.width=5, results="asis"}
tab <- alpha(pseq, index = "all")
kable(head(tab))
```
## Richness
This returns observed richness with given detection threshold(s).
```{r divest, warning=FALSE, message=FALSE, fig.height=3, fig.width=5}
tab <- richness(pseq)
kable(head(tab))
```
## Dominance
The dominance index refers to the abundance of the most abundant species. Various dominance indices are available (see the function help for a list of options).
```{r dominance, warning=FALSE, message=FALSE}
# Absolute abundances for the single most abundant taxa in each sample
tab <- dominance(pseq, index = "all")
kable(head(tab))
```
We also have a function to list the dominating (most abundant) taxa in each sample.
```{r dominant, warning=FALSE, message=FALSE, results="hide"}
dominant(pseq)
```
## Rarity and low abundance
The rarity indices quantify the concentration of rare or low abundance taxa. Various rarity indices are available (see the function help for a list of options).
```{r lowab, warning=FALSE, message=FALSE}
tab <- rarity(pseq, index = "all")
kable(head(tab))
```
## Coverage
The coverage index gives the number of groups needed to have a given proportion of the ecosystem occupied (by default 0.5 ie 50%).
```{r coverage, warning=FALSE, message=FALSE, eval=FALSE}
tab <- coverage(pseq, threshold = 0.5)
kable(head(tab))
```
## Core abundance
The core_abundance function refers to the relative proportion of the core species. Non-core abundance provides the complement (1-x; see rare_abundance).
```{r divest5, warning=FALSE, message=FALSE}
tab <- core_abundance(pseq, detection = .1/100, prevalence = 50/100)
```
## Gini index
Gini index is a common measure for inequality in economical income. The inverse gini index (1/x) can also be used as a community diversity measure.
```{r divest6, warning=FALSE, message=FALSE}
tab <- inequality(pseq)
```
## Evenness
Various evenness measures are also available.
```{r evenness, warning=FALSE, message=FALSE}
tab <- evenness(pseq, "all")
kable(head(tab))
```
For tutorial on plotting the output of alpha diversity please check [PlotDiversity](PlotDiversity.html)
library(microbiome)
library(knitr)
data(dietswap)
pseq <- dietswap
tab <- alpha(pseq, index = "all")
kable(head(tab))
tab <- alpha(pseq, index = "all")
kable(head(tab))
tab <- richness(pseq)
kable(head(tab))
# Absolute abundances for the single most abundant taxa in each sample
tab <- dominance(pseq, index = "all")
kable(head(tab))
# Absolute abundances for the single most abundant taxa in each sample
tab <- dominance(pseq, index = "all")
kable(head(tab))
dominant(pseq)
tab <- rarity(pseq, index = "all")
kable(head(tab))
tab <- coverage(pseq, threshold = 0.5)
kable(head(tab))
tab <- core_abundance(pseq, detection = .1/100, prevalence = 50/100)
tab <- inequality(pseq)
tab <- evenness(pseq, "all")
kable(head(tab))
rmarkdown::render('Betadiversity.rmd','html_document')
rmarkdown::render('Diversity.rmd','html_document')
rmarkdown::render('Diversity.rmd','html_document')
rmarkdown::render('Betadiversity.rmd','html_document')
rmarkdown::render('Betadiversity.rmd','html_document')
getwd()
library(IRanges)
%/??
%/
??%/
install.packages('ggvis')
library(ggvis)
library(ggvis)
`r mean(c(3,4,2,3,4,4,4,5,6,7))
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(knitr)
mean(c(3,4,2,3,4,4,4,5,6,7))
mean(c(3,4,2,3,4,4,4,5,6,7))
### The mean of all values is:`r mean(c(3,4,2,3,4,4,4,5,6,7))`
**The mean of all values is:**`r mean(c(3,4,2,3,4,4,4,5,6,7))`
**The mean of all values is:**`r mean(c(3,4,2,3,4,4,4,5,6,7))`
```{r simple_sum, results = 'hide'}
2 + 2
```
getwd()
setwd('C:/Users/witasa/Seafile/My Library/me')
my_html_document <- function(template = "path_to_custom_template", ...) {
base_format <- rmarkdown::html_document(...)
template_arg <- which(base_format$pandoc$args == "--template") + 1L
base_format$pandoc$args[template_arg] <- template
base_format
}
my_html_document <- function(template = "path_to_custom_template", ...) {
base_format <- rmarkdown::html_document(...)
template_arg <- which(base_format$pandoc$args == "--template") + 1L
base_format$pandoc$args[template_arg] <- template
base_format
}
my_html_document(template =' C:\Users\witasa\Seafile\My Library\Important\New_microbiome\tutorials')
my_html_document(template = 'C:\Users\witasa\Seafile\My LibraryImportant7New_microbiome/tutorials')
my_html_document(template = 'C:/Users/witasa/Seafile/My LibraryImportant7New_microbiome/tutorials')
my_html_document <- function(template = "path_to_custom_template", ...) {
+   base_format <- rmarkdown::html_document(...)
+
+   template_arg <- which(base_format$pandoc$args == "--template") + 1L
+   base_format$pandoc$args[template_arg] <- template
+
+   base_format
+ }
my_html_document <- function(template = "path_to_custom_template", ...) {
base_format <- rmarkdown::html_document(...)
template_arg <- which(base_format$pandoc$args == "--template") + 1L
base_format$pandoc$args[template_arg] <- template
base_format
}
######
my_html_document(template = 'C:/Users/witasa/Seafile/My LibraryImportant7New_microbiome/tutorials')

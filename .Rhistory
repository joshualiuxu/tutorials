'hrbrthemes', 'gcookbook','GGally', 'rvg','ggiraph','network', 'gplots',
'intergraph', 'rmdformats', 'FD', 'hrbrthemes', 'GGally', 'lattice')
.bioc_packages <- c("dada2", "phyloseq",'SummarizedExperiment','Biobase',
"DECIPHER",'IRanges','BiocGenerics', "phangorn",
'BiocStyle', "microbiome", "DESeq2", 'DirichletMultinomial')
# package.version("microbiome")
#[1] "1.5.31"
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {
install.packages(.cran_packages[!.inst])
}
sapply(.cran_packages, require, character.only = TRUE)
library('devtools')
.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {
#source("http://bioconductor.org/biocLite.R")
BiocManager::install(.bioc_packages[!.inst], ask = F)
}
###
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c(.bioc_packages,"SummarizedExperiment", 'DelayedArray'))
# Load packages into session, and print package version
sapply(c(.cran_packages, .bioc_packages), require, character.only = TRUE)
detach("package:GenomicRanges", unload = TRUE)
library(DESeq2)
library(microbiome)
# Handle citations
require(knitcitations)
require(bookdown)
# cleanbib()
# options("citation_format" = "pandoc")
bib <- read.bibtex("bibliography.bib")
#opts_chunk$set(fig.width=4, fig.height=3, par=TRUE, out.width='2in', fig.pos='H')
library(knitr)
library(ggplot2)
knitr::opts_chunk$set(fig.path = "figure/", dev="CairoPNG")
theme_set(theme_bw(20))
library(microbiome)
data(dietswap)
d <- dietswap
# Pick microbial abundances for a given taxonomic group
taxa <- "Dialister"
# Construct a data.frame with the selected
# taxonomic group and grouping
df <- data.frame(Abundance = abundances(d)[taxa,],
Group = meta(d)$nationality)
p1 <- ggplot(df, aes(x = Group, y = Abundance)) +
geom_boxplot() +
labs(title = "Absolute abundances", y = "Abundance (read count)")
# Let us add the log10(1+x) version:
df$Log10_Abundance <- log10(1 + df$Abundance)
p2 <- ggplot(df, aes(x = Group, y = Log10_Abundance)) +
geom_boxplot() +
labs(title = "Log10 abundances", y = "Abundance (log10(1+x) read count)")
library(patchwork)
p1 + p2
print(t.test(Log10_Abundance ~ Group, data = df)$p.value)
p <- ggplot(df, aes(fill = Group, x = Log10_Abundance)) +
geom_density(alpha = 0.5)
print(p)
print(wilcox.test(Log10_Abundance ~ Group, data = df)$p.value)
print(wilcox.test(Abundance ~ Group, data = df)$p.value)
# Core taxa to be tested
test.taxa <- core_members(d, prevalence = 20/100, detection = 3)
# Calculate p-values with the two different methods for each taxonomic unit
pvalue.ttest <- c()
pvalue.wilcoxon <- c()
for (taxa in test.taxa) {
# Create a new data frame for each taxonomic group
df <- data.frame(Abundance = abundances(d)[taxa,],
Log10_Abundance = log10(1 + abundances(d)[taxa,]),
Group = meta(d)$nationality)
pvalue.ttest[[taxa]] <- t.test(Log10_Abundance ~ Group, data = df)$p.value
pvalue.wilcoxon[[taxa]] <- wilcox.test(Abundance ~ Group, data = df)$p.value
}
# Arrange the results in a data.frame
pvalues <- data.frame(taxon = test.taxa,
pvalue.ttest = pvalue.ttest,
pvalue.wilcoxon = pvalue.wilcoxon)
# Note that multiple testing occurs.
# We must correct the p-values.
# let us apply the standard Benjamini-Hochberg False Discovery Rate (FDR)
# correction
pvalues$pvalue.ttest.adjusted <- p.adjust(pvalue.ttest)
#pvalues$pvalue.ttest.adjusted <- p.adjust(pvalues$pvalue.ttest)
pvalues$pvalue.wilcoxon.adjusted <- p.adjust(pvalue.wilcoxon)
library(reshape2)
library(tidyverse)
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) +
geom_histogram() +
labs(title = "Raw p-values") +
ylim(c(0, 80))
p2 <- ggplot(pvalues, aes(x = pvalue.wilcoxon.adjusted)) +
geom_histogram(binwidth = 30) +
labs(title = "Adjusted p-values") +
ylim(c(0, 80))
print(p1 + p2)
pvalue.wilcoxon
pvalue.wilcoxon
pvalue.wilcoxon.adjusted
p2 <- ggplot(pvalues, aes(x = pvalue.wilcoxon.adjusted)) +
geom_histogram(binwidth = 30) +
labs(title = "Adjusted p-values") +
ylim(c(0, 80))
p1
library(ggplot2)
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) +
geom_histogram() +
labs(title = "Raw p-values") +
ylim(c(0, 80))
p2 <- ggplot(pvalues, aes(x = pvalue.wilcoxon.adjusted)) +
geom_histogram(binwidth = 30) +
labs(title = "Adjusted p-values") +
ylim(c(0, 80))
print(p1 + p2)
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) + geom_histogram() +
labs(title = "Raw p-values") +
ylim(c(0, 80))
p2 <- ggplot(pvalues, aes(x = pvalue.wilcoxon.adjusted)) + geom_histogram() +
labs(title = "Adjusted p-values") +
ylim(c(0, 80))
p1
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) + geom_histogram(binwidth = 0.01) +
labs(title = "Raw p-values") +
ylim(c(0, 80))
p1
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) + geom_density(binwidth = 0.01) +labs(title = "Raw p-values") + ylim(c(0, 80))
p1
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) + geom_histogram(binwidth = 0.01) +  labs(title = "Raw p-values") +	ylim(c(0, 80))
p1
View(pvalue.ttest)
View(pvalues)
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon, y = taxon)) + geom_histogram(binwidth = 0.01) +  labs(title = "Raw p-values") +	ylim(c(0, 80))
p1
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) + geom_histogram(binwidth = 0.01) +  labs(title = "Raw p-values") +	ylim(c(0, 80))
p1
stat_bin()
?stat_bin
dim(pvalues)
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) + geom_histogram(bins = 80) +  labs(title = "Raw p-values") +	ylim(c(0, 80))
p1
library(reshape2)
library(tidyverse)
library(ggplot2)
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) + geom_histogram(bins = 80) +  labs(title = "Raw p-values") +	ylim(c(0, 80))
p2 <- ggplot(pvalues, aes(x = pvalue.wilcoxon.adjusted)) + geom_histogram() +
labs(title = "Adjusted p-values") +
ylim(c(0, 80))
print(p1 + p2)
sessionInfo()
p <- ggplot(data = pvalues,
aes(x = pvalue.ttest.adjusted,
y = pvalue.wilcoxon.adjusted)) +
geom_text(aes(label = taxon)) +
geom_abline(aes(intercept = 0, slope = 1)) +
geom_hline(aes(yintercept = 0.05), shape = 2) +
geom_vline(aes(xintercept = 0.05), shape = 2)
print(p)
res <- glm(Log10_Abundance ~ Group, data = df, family = "gaussian")
kable(summary(res)$coefficients, digits = 5)
hist(pvalues$pvalue.wilcoxon.adjusted)
hist(pvalues$pvalue.wilcoxon.adjusted, col="grey", breaks=0:90)
hist(pvalues$pvalue.wilcoxon.adjusted, col="grey")
hist(pvalues$pvalue.wilcoxon.adjusted, col="grey", breaks=0:80)
hist(pvalues$pvalue.wilcoxon.adjusted, col="grey", breaks=0:90)
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) + geom_histogram(stat = 'bin) +  labs(title = "Raw p-values") +	ylim(c(0, 80))
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) + geom_histogram(stat = 'bin')
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) + geom_histogram(stat = 'bin') + labs(title = "Raw p-values") +	ylim(c(0, 80))
p1
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) +
geom_histogram(mapping = NULL,
data = NULL,
stat = "bin",
position = "stack",
...,
binwidth = NULL,
bins = NULL,
na.rm = FALSE,
orientation = NA,
show.legend = NA,
inherit.aes = TRUE) +
labs(title = "Raw p-values") +	ylim(c(0, 80))
p1 <- ggplot(pvalues, aes(x = pvalue.wilcoxon)) +
geom_histogram(mapping = NULL,
data = NULL,
stat = "bin",
position = "stack")
p1
# Download the required R packages and then the HITChip Atlas data set
library(microbiome)
data(atlas1006)
tab <- microbiome::alpha(atlas1006, index = c("shannon", "invsimpson"))
library(knitr)
kable(head(tab))
rmarkdown::render('Atlas.Rmd', 'all')
library(microbiome)
library(dplyr)
data(peerj32)
pseq <- peerj32$phyloseq
betas <- list()
groups <- as.character(unique(meta(pseq)$group))
for (g in groups) {
df <- subset(meta(pseq), group == g)
beta <- c()
for (subj in df$subject) {
# Pick the samples for this subject
dfs <- subset(df, subject == subj)
# Check that the subject has two time points
if (nrow(dfs) == 2) {
s <- as.character(dfs$sample)
# Here with just two samples we can calculate the
# beta diversity directly
beta[[subj]] <- divergence(abundances(pseq)[, s[[1]]],
abundances(pseq)[, s[[2]]],
method = "bray")
}
}
betas[[g]] <- beta
}
boxplot(betas)
# Load the example data
library(microbiome)
library(dplyr)
data(atlas1006)
# Rename the example data
pseq <- atlas1006
# Focus on specific DNA extraction method
pseq <- pseq %>% subset_samples(DNA_extraction_method == "r")
# Keep prevalent taxa (HITChip signal >3 in >20 percent of the samples)
pseq <- core(pseq, detection = 10^3, prevalence = .2)
# Use relative abundances
pseq <- microbiome::transform(pseq, "compositional")
# For cross-sectional analysis, include
# only the zero time point:
pseq0 <- subset_samples(pseq, time == 0)
# Bimodality is better estimated from log10 abundances
pseq0.log10 <- microbiome::transform(pseq0, "log10")
bimodality <- bimodality(pseq0.log10, method = "potential_analysis", bs.iter = 20)
# Bimodality is better estimated from log10 abundances
pseq0.log10 <- microbiome::transform(pseq0, "log10")
pseq0.log10
# Bimodality is better estimated from log10 abundances
pseq0.log10 <- microbiome::transform(pseq0, "log10")
bimodality <- bimodality(pseq0.log10, method = "potential_analysis", bs.iter = 20)
bimodality <- bimodality(pseq0.log10, method = "potential_analysis", bs.iter = 10)
# Pick the most and least bimodal taxa as examples
unimodal  <- names(sort(bimodality))[[1]]
bimodality <- bimodality(pseq0.log10, method = "potential_analysis")
library(netresponse)
BiocManager::install('netresponse')
library(netresponse)
library(netresponse)
# Generate simulated data
res <- generate.toydata(Dim = 2)
D <- res$data
component.means <- res$means
component.sds   <- res$sds
# Fit the mixture
m <- mixture.model(D, mixture.method = "vdp", pca.basis = FALSE)
# Plot the data, and indicate estimated modes with colors.
# If data dimensionality exceeds 2,
# the results are visualized on PCA projection
# (with pca.basis = TRUE the data is projected on PCA coordinates;
# without loss of information. This trick can help to avoid overlearning
# as the variational mixture relies
# on diagonal covariance matrices, so the ellipsoidal axes of the
# Gaussian modes are parallel to the coordinate axes.)
p <- PlotMixtureMultivariate(D, means = m$mu, sds = m$sd, ws = m$w, modes = apply(m$qofz,1,which.max))
# Generate simulated bimodal univariate data
x <- c(rnorm(200), rnorm(200, mean = 5))
# Variational Dirichlet process univariate Gaussian mixture
m <- mixture.model(x, mixture.method = "vdp", max.responses = 10)
# Plot the data and estimated modes
p <- PlotMixtureUnivariate(x, means = m$mu, sds = m$sd, ws = m$w, binwidth = 0.1, qofz = m$qofz)
print(p)
# Example data
data("dietswap")
library(FD)
d <- gowdis(as(sample_data(dietswap), "data.frame"))
plot(hclust(d))
rmarkdown::render('Clustering.Rmd','all')
rmarkdown::render('Clustering.Rmd','all')
rmarkdown::render('Clustering.Rmd','all')
dev.off()
dev.off()
dev.off()
rmarkdown::render('Comparisons.Rmd','all')
# Example data
library(microbiome)
library(dplyr)
data(dietswap)
# Make sure we use functions from correct package
transform <- microbiome::transform
# Just use prevalent taxa to speed up examples
# (not absolute counts used in this example)
pseq <- core(dietswap, detection = 50, prevalence = 50/100)
# Pick sample subset
library(phyloseq)
pseq2 <- subset_samples(pseq, group == "DI" & nationality == "AFR" & timepoint.within.group == 1)
# Normal western adults
data(atlas1006)
pseq3 <- atlas1006 %>%
subset_samples(DNA_extraction_method == "r") %>%
aggregate_taxa(level = "Phylum") %>%
microbiome::transform(transform = "compositional")
# Try another theme
# from https://github.com/hrbrmstr/hrbrthemes
library(hrbrthemes)
library(gcookbook)
library(tidyverse)
theme_set(theme_bw(21))
p <- pseq3 %>%
plot_composition(sample.sort = "Firmicutes", otu.sort = "abundance") +
# Set custom colors
scale_fill_manual(values = default_colors("Phylum")[taxa(pseq3)])
print(p)
# Limit the analysis on core taxa and specific sample group
p <- plot_composition(pseq2,
taxonomic.level = "Genus",
sample.sort = "nationality",
x.label = "nationality") +
guides(fill = guide_legend(ncol = 1)) +
scale_y_percent() +
labs(x = "Samples", y = "Relative abundance (%)",
title = "Relative abundance data",
subtitle = "Subtitle",
caption = "Caption text.") +
theme_ipsum(grid="Y")
print(p)
# Averaged by group
p <- plot_composition(pseq2,
average_by = "bmi_group", transform = "compositional")
print(p)
p <- NULL
p <- plot_composition(microbiome::transform(pseq, "compositional"),
plot.type = "heatmap",
sample.sort = "neatmap",
otu.sort = "neatmap")
p <- plot_composition(microbiome::transform(pseq, "compositional"),
plot.type = "heatmap",
sample.sort = "neatmap",
otu.sort = "neatmap", verbose = T)
print(p)
p <- plot_composition(microbiome::transform(pseq, "compositional"),
plot.type = "heatmap",
sample.sort = "neatmap",
otu.sort = "neatmap", verbose = F)
pseq
p <- plot_composition(microbiome::transform(pseq, "compositional"),
plot.type = "heatmap",
sample.sort = "neatmap", otu.sort = "neatmap", verbose = FALSE)
library(microbiome)
p <- plot_composition(microbiome::transform(pseq, "compositional"),
plot.type = "heatmap",
sample.sort = "neatmap", otu.sort = "neatmap", verbose = 'compositional')
p <- plot_composition(microbiome::transform(pseq, "compositional"),
plot.type = "heatmap",
sample.sort = "neatmap",
otu.sort = "neatmap")
p <- plot_composition(microbiome::transform(pseq, "compositional"), plot.type = "heatmap", sample.sort = "neatmap", otu.sort = "neatmap")
data(atlas1006)
# Use sample and taxa subset to speed up example
p0 <- subset_samples(atlas1006, DNA_extraction_method == "r")
# Define detection and prevalence thresholds to filter out rare taxa
p0 <- core(p0, detection = 10, prevalence = 0)
# For the available taxonomic levels
plot_taxa_prevalence(p0, "Phylum", detection = 10)
# Example data
library(microbiome)
# Try another theme
# from https://github.com/hrbrmstr/hrbrthemes
# you can install these if you don't have it already.
# devtools::install_github("hrbrmstr/hrbrthemes")
#library(devtools)
# install_github("microsud/microbiomeutilities")
library(hrbrthemes)
library(microbiomeutilities)
BiocManager::install('microbiomeutilities')
library(devtools)
devtools::install_github("microsud/microbiomeutilities")
# Example data
library(microbiome)
library(dplyr)
data(dietswap)
# Just use prevalent taxa to speed up examples
# (not absolute counts used in this example)
pseq <- core(dietswap, detection = 8^2, prevalence = 90/100)
# Pick sample subset
library(phyloseq)
pseq2 <- subset_samples(pseq, group == "DI" & nationality == "AFR" & timepoint.within.group == 1)
# Try another theme
# from https://github.com/hrbrmstr/hrbrthemes
library(hrbrthemes)
library(gcookbook)
library(tidyverse)
# Limit the analysis on core taxa and specific sample group
p <- plot_composition(pseq2,
taxonomic.level = "OTU",
sample.sort = "nationality",
x.label = "nationality") +
guides(fill = guide_legend(ncol = 1)) +
scale_y_percent() +
labs(x = "Samples", y = "Relative abundance (%)",
title = "Relative abundance data",
subtitle = "Subtitle",
caption = "Caption text.") +
theme_ipsum(grid="Y")
print(p)
# Averaged by group
p <- plot_composition(pseq2,
average_by = "bmi_group", transform = "compositional")
print(p)
tmp <- plot_composition(pseq2, plot.type = "heatmap", transform = "compositional",
sample.sort = "neatmap", otu.sort = "neatmap", mar = c(6, 13, 1, 1))
data(atlas1006)
# Use sample and taxa subset to speed up example
p0 <- subset_samples(atlas1006, DNA_extraction_method == "r")
# Define detection and prevalence thresholds to filter out rare taxa
p0 <- core(p0, detection = 10, prevalence = 0)
# For the available taxonomic levels
plot_taxa_prevalence(p0, "Phylum", detection = 10)
rmarkdown::render('CompositionAmplicondata.Rmd','all')
library(dplyr)
data(atlas1006)
pseq <- atlas1006 %>%
subset_samples(DNA_extraction_method == "r") %>%
aggregate_taxa(level = "Phylum") %>%
transform(transform = "compositional")
p <- plot_composition(pseq, sample.sort = "Firmicutes",
otu.sort = "abundance", verbose = TRUE) +
scale_fill_manual(values = default_colors("Phylum")[taxa(pseq)])
p
# Example data
library(microbiome)
# Try another theme
# from https://github.com/hrbrmstr/hrbrthemes
# you can install these if you don't have it already.
# devtools::install_github("hrbrmstr/hrbrthemes")
library(hrbrthemes)
library(gcookbook)
library(tidyverse)
library(dplyr)
data("DynamicsIBD") #This data is currently unavialable due to size limitations
ps1 <- DynamicsIBD
# Try another theme
# from https://github.com/hrbrmstr/hrbrthemes
# you can install these if you don't have it already.
# devtools::install_github("hrbrmstr/hrbrthemes")
library(hrbrthemes)
library(gcookbook)
library(tidyverse)
library(dplyr)
data("DynamicsIBD") #This data is currently unavialable due to size limitations
ps1 <- DynamicsIBD
DynamicsIBD
# First change the column names of the taxonomy table in phyloseq to following:
colnames(tax_table(ps1)) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species" )
# Example data
library(microbiome)
# Try another theme
# from https://github.com/hrbrmstr/hrbrthemes
# you can install these if you don't have it already.
# devtools::install_github("hrbrmstr/hrbrthemes")
library(hrbrthemes)
library(gcookbook)
library(tidyverse)
library(dplyr)
data("DynamicsIBD") #This data is currently unavialable due to size limitations
ps1 <- DynamicsIBD
# Example data
library(microbiome)
# Try another theme
# from https://github.com/hrbrmstr/hrbrthemes
# you can install these if you don't have it already.
# devtools::install_github("hrbrmstr/hrbrthemes")
library(hrbrthemes)
library(gcookbook)
library(tidyverse)
library(dplyr)
data("DynamicsIBD") #This data is currently unavialable due to size limitations
ps1 <- DynamicsIBD
# Example data
library(microbiome)
# Try another theme
# from https://github.com/hrbrmstr/hrbrthemes
# you can install these if you don't have it already.
# devtools::install_github("hrbrmstr/hrbrthemes")
library(hrbrthemes)
library(gcookbook)
library(tidyverse)
library(dplyr)
data("DynamicsIBD") #This data is currently unavialable due to size limitations
ps1 <- DynamicsIBD
# First change the column names of the taxonomy table in phyloseq to following:
colnames(tax_table(ps1)) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species" )
# Example data
library(microbiome)
# Try another theme
# from https://github.com/hrbrmstr/hrbrthemes
# you can install these if you don't have it already.
# devtools::install_github("hrbrmstr/hrbrthemes")
library(hrbrthemes)
library(gcookbook)
library(tidyverse)
library(dplyr)
data("DynamicsIBD") #This data is currently unavialable due to size limitations
ps1 <- DynamicsIBD
rmarkdown::render('CompositionAmplicondata2.Rmd','all')
rmarkdown::render('CompositionAmplicondata.Rmd','all')
rmarkdown::render('Contributing.Rmd','all')
rmarkdown::render('Core.Rmd','all')

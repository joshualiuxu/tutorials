}
install.packages('GGally')
library(GGally)
ggcorr(x[, 1:10], method = c("pairwise", "spearman"), nbreaks = 20, hjust = 0.75)
ggcorr(x[, 1:10], method = c("pairwise", "spearman"), nbreaks = 20, geom = "circle")
ggcorr(x[, 1:10], method = c("pairwise", "spearman"), nbreaks = 20, label = TRUE, label_alpha = TRUE)
library(microbiome) # Load libraries
library(phyloseq)
library(dplyr)
library(reshape2)
library(knitr)
data(peerj32)
pseq <- peerj32$phyloseq    # Rename data
# Pick data subset (DI samples from Phylum Bacteroidetes)
pseq2 <- pseq %>%
subset_taxa(Phylum == "Bacteroidetes") %>%
subset_samples(group == "LGG")
# Z transformed abundance data
pseqz <- microbiome::transform(pseq2, "Z")
# Plot the abundances heatmap
heat(melt(abundances(pseqz)), "Var1", "Var2", "value")
# Sort the matrix rows and cols directly
xo <- neat(abundances(pseqz), method = "NMDS", distance = "euclidean")
# Heatmap visualization
heat(melt(xo), "Var1", "Var2", "value")
# or use a shortcut to sorting rows (or columns) if just the order was needed
sorted.rows <- neatsort(abundances(pseqz), "rows", method = "NMDS", distance = "euclidean")
# Load example data
otu <- peerj32$microbes
lipids <- peerj32$lipids
# Define data sets to cross-correlate
x <- log10(otu) # OTU Log10 (44 samples x 130 genera)
y <- as.matrix(lipids) # Lipids (44 samples x 389 lipids)
# Cross correlate data sets
correlations <- associate(x, y, method = "spearman", mode = "matrix", p.adj.threshold = 0.05, n.signif = 1)
# Or, alternatively, the same output is also available in a handy table format
correlation.table <- associate(x, y, method = "spearman", mode = "table", p.adj.threshold = 0.05, n.signif = 1)
kable(head(correlation.table))
p <- heat(correlation.table, "X1", "X2", fill = "Correlation", star = "p.adj", p.adj.threshold = 0.05)
print(p)
# Order the rows and columns with levels argument if needed:
correlation.table$X1 <- factor(correlation.table$X1, levels = unique(as.character(correlation.table$X1)))
correlation.table$X2 <- factor(correlation.table$X2, levels = unique(as.character(correlation.table$X2)))
# Set black-and-white theme
library(ggplot2)
theme_set(theme_bw())
# Pick only the correlations with q<0.05
# Note: this will leave other cells empty
library(dplyr)
subtable <- filter(correlation.table, p.adj < 0.05)
# Arrange the figure
p <- ggplot(subtable, aes(x = X1, y = X2, fill = Correlation))
p <- p + geom_tile()
p <- p + scale_fill_gradientn("Correlation",
breaks = seq(from = -1, to = 1, by = 0.2),
colours = c("darkblue", "blue", "white", "red", "darkred"),
limits = c(-1,1))
# Polish texts
p <- p + theme(axis.text.x=element_text(angle = 90))
p <- p + xlab("") + ylab("")
# Mark the most significant cells with stars
p <- p + geom_text(data = subset(correlation.table, p.adj < 0.02),
aes(x = X1, y = X2, label = "+"), col = "white", size = 5)
# Plot
print(p)
theme_set(theme_bw(20))
df <- correlation.table
p <- ggplot(df, aes(X1, X2, group=X2))
p <- p + geom_tile(aes(fill = Correlation))
p <- p + geom_text(aes(fill = df$Correlation, label = round(df$Correlation, 1)), size = 2)
p <- p + scale_fill_gradientn("Correlation",
breaks = seq(from = -1, to = 1,  by = 0.25),
colours = c("blue", "white", "red"),
limits = c(-1, 1))
p <- p + theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
p <- p + xlab("") + ylab("")
print(p)
library(GGally)
ggcorr(x[, 1:10], method = c("pairwise", "spearman"), nbreaks = 20, hjust = 0.75)
ggcorr(x[, 1:10], method = c("pairwise", "spearman"), nbreaks = 20, geom = "circle")
ggcorr(x[, 1:10], method = c("pairwise", "spearman"), nbreaks = 20, label = TRUE, label_alpha = TRUE)
ggcorr(data = NULL, cor_matrix = cor(x[, 1:10], use = "everything"), low = "steelblue", mid = "white", high = "darkred", midpoint = 0)
#for (myfile in setdiff(fs, "Themes.Rmd")) {
for (myfile in fs) {
rmarkdown::render(myfile)
}
library(ggplot2)
library(rvg)
install.packages('rvg')
library(ggiraph)
install.packages('ggiraph')
library(rvg)
library(ggiraph)
library(microbiome)
data("atlas1006")
library(ggplot2)
library(rvg)
library(ggiraph)
library(microbiome)
data("atlas1006")
pseq <- atlas1006
x <- microbiome::transform(atlas1006, "compositional")
mytheme_main <- theme( panel.background = element_blank(),
panel.grid.major = element_line(colour = "#dddddd"),
axis.ticks = element_line(colour = "#dddddd") )
mytheme_map <- theme(
panel.background = element_blank(), axis.title.x = element_blank(),
axis.text = element_blank(), axis.line.x = element_blank(),
axis.line.y = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank() )
df <- as(sample_data(x), "data.frame")
df$Dialister <- get_sample(x, "Dialister")
df$Prevotella <- get_sample(x, "Prevotella melaninogenica et rel.")
df$sample <- row.names(df)
# geom_point_interactive example
gg_point_1 <- ggplot(df, aes(x = Prevotella, y = Dialister,
color = age, tooltip = sample) ) +
geom_point_interactive(size=3)
# htmlwidget call
ggiraph(code = {print(gg_point_1 + mytheme_main)})
library(ggplot2)
library(rvg)
library(ggiraph)
library(microbiome)
data("atlas1006")
pseq <- atlas1006
x <- microbiome::transform(atlas1006, "compositional")
mytheme_main <- theme( panel.background = element_blank(),
panel.grid.major = element_line(colour = "#dddddd"),
axis.ticks = element_line(colour = "#dddddd") )
mytheme_map <- theme(
panel.background = element_blank(), axis.title.x = element_blank(),
axis.text = element_blank(), axis.line.x = element_blank(),
axis.line.y = element_blank(), axis.title.y = element_blank(),
axis.ticks.x = element_blank(), axis.ticks.y = element_blank() )
df <- as(sample_data(x), "data.frame")
df$Dialister <- get_sample(x, "Dialister")
df$Prevotella <- get_sample(x, "Prevotella melaninogenica et rel.")
df$sample <- row.names(df)
# geom_point_interactive example
gg_point_1 <- ggplot(df, aes(x = Prevotella, y = Dialister,
color = age, tooltip = sample) ) +
geom_point_interactive(size=3)
# htmlwidget call
ggiraph(code = {print(gg_point_1 + mytheme_main)})
#for (myfile in setdiff(fs, "Themes.Rmd")) {
for (myfile in fs) {
rmarkdown::render(myfile)
}
install_github('zdk123/SpiecEasi')
# SPIEC-EASI network reconstruction
# In practice, use more repetitions
library(SpiecEasi) #install_github("zdk123/SpiecEasi")
install.packages('network')
# Network format
library(network)
netw <- network(as.matrix(n), directed = FALSE)
# igraph format
library(igraph)
# Visualize the network
# print(plot(ig, layout = coord, vertex.size = vsize, vertex.label = names(vsize)))
# Pick the OTU table
library(phyloseq)
otu <- abundances(pseq)
# SPIEC-EASI network reconstruction
# In practice, use more repetitions
library(SpiecEasi) #install_github("zdk123/SpiecEasi")
net <- spiec.easi(t(otu), method='mb', lambda.min.ratio=1e-2, nlambda=5, icov.select.params=list(rep.num=1))
## Create graph object
n <- net$refit
colnames(n) <- rownames(n) <- rownames(otu)
net <- spiec.easi(t(otu), method='mb', lambda.min.ratio=1e-2, nlambda=5, icov.select.params=list(rep.num=1))
net <- spiec.easi(t(otu), method='mb', lambda.min.ratio=1e-2, nlambda=5, icov.select.params=list(rep.num=1))
## Create graph object
n <- net$refit
n
colnames(n) <- rownames(n) <- rownames(otu)
rownames(otu)
rownames(n)
colnames(n)
n
class(n)
colnames(n) <- rownames(n) <- rownames(otu)
otu
class(otu)
dim(otu)
dim(n)
class(n)
m<-as.numeric(n)
m<-as.numeric(unlist(n))
m<-unlist(n)
m
as.numeric(m)
identical(n, unlist(n))
dim(n)
# Network format
library(network)
netw <- network(as.matrix(n), directed = FALSE)
# igraph format
library(igraph)
plot(0:(length(dd)-1), dd, ylim = c(0,.35), type = 'b',
ylab = "Frequency", xlab = "Degree", main = "Degree Distributions")
dd <- degree.distribution(ig)
plot(0:(length(dd)-1), dd, ylim = c(0,.35), type = 'b',
ylab = "Frequency", xlab = "Degree", main = "Degree Distributions")
library(ggnet)
library(GGally)
library(ggnet)
install.packages('ggnet')
install_github('briatte/ggnet')
library(ggnet)
library(network)
library(sna)
library(ggplot2)
library(intergraph) # ggnet2 works also with igraph with this
install.packages('intergraph')
phyla <- map_levels(rownames(otu),
from = "Genus", to = "Phylum",
tax_table(pseq))
library(intergraph) # ggnet2 works also with igraph with this
phyla <- map_levels(rownames(otu),
from = "Genus", to = "Phylum",
tax_table(pseq))
netw %v% "Phylum" <- phyla
p <- ggnet2(netw, color = "Phylum", label = TRUE, label.size = 2)
rownames(otu)
phyla <- map_levels(rownames(otu),
from = "Genus", to = "Phylum",
tax_table(pseq))
netw %v% "Phylum" <- phyla
library(microbiome)
data(dietswap)
pseq <- dietswap
# Keep only the prevalent taxa to speed up examples
pseq <- core(pseq, detection = 5^2, prevalence = 80/100)
pseq <- subset_samples(pseq, nationality == "AFR" & group == "DI" & bmi_group == "lean")
# Pick the OTU table
library(phyloseq)
otu <- abundances(pseq)
# SPIEC-EASI network reconstruction
# In practice, use more repetitions
library(SpiecEasi) #install_github("zdk123/SpiecEasi")
net <- spiec.easi(t(otu), method='mb', lambda.min.ratio=1e-2, nlambda=5, icov.select.params=list(rep.num=1))
## Create graph object
n <- net$refit
colnames(n) <- rownames(n) <- rownames(otu)
# Network format
library(network)
netw <- network(as.matrix(n), directed = FALSE)
# igraph format
library(igraph)
# Visualize the network
# print(plot(ig, layout = coord, vertex.size = vsize, vertex.label = names(vsize)))
dd <- degree.distribution(ig)
dd <- degree.distribution(ig)
plot(0:(length(dd)-1), dd, ylim = c(0,.35), type = 'b',
ylab = "Frequency", xlab = "Degree", main = "Degree Distributions")
library(GGally)
library(ggnet)
library(network)
library(sna)
library(ggplot2)
library(intergraph) # ggnet2 works also with igraph with this
phyla <- map_levels(rownames(otu),
from = "Genus", to = "Phylum",
tax_table(pseq))
netw %v% "Phylum" <- phyla
p <- ggnet2(netw, color = "Phylum", label = TRUE, label.size = 2)
print(p)
library(GGally)
library(ggnet)
library(network)
library(sna)
library(ggplot2)
library(intergraph) # ggnet2 works also with igraph with this
phyla <- map_levels(rownames(otu),
from = "Genus", to = "Phylum",
tax_table(pseq))
netw %v% "Phylum" <- phyla
phyla <- map_levels(rownames(otu),
from = "Genus", to = "Phylum",
tax_table(pseq))
netw %v% "Phylum" <- phyla
#netw %v% "Phylum" <- phyla
p <- ggnet2(netw, color = "Phylum", label = TRUE, label.size = 2)
#netw %v% "Phylum" <- phyla
#p <- ggnet2(netw, color = "Phylum", label = TRUE, label.size = 2)
print(p)
dd <- degree.distribution(ig)
#dd <- degree.distribution(ig)
#plot(0:(length(dd)-1), dd, ylim = c(0,.35), type = 'b',
ylab = "Frequency", xlab = "Degree", main = "Degree Distributions")
#dd <- degree.distribution(ig)
#plot(0:(length(dd)-1), dd, ylim = c(0,.35), type = 'b',  ylab = "Frequency", xlab = "Degree", main = "Degree Distributions")
# SPIEC-EASI network reconstruction
# In practice, use more repetitions
library(SpiecEasi) #install_github("zdk123/SpiecEasi")
net <- spiec.easi(t(otu), method='mb', lambda.min.ratio=1e-2, nlambda=5, icov.select.params=list(rep.num=1))
## Create graph object
n <- net$refit
colnames(n) <- rownames(n) <- rownames(otu)
# Network format
library(network)
netw <- network(as.matrix(n), directed = FALSE)
# igraph format
library(igraph)
library(microbiome)
data(dietswap)
pseq <- dietswap
# Keep only the prevalent taxa to speed up examples
pseq <- core(pseq, detection = 5^2, prevalence = 80/100)
pseq <- subset_samples(pseq, nationality == "AFR" & group == "DI" & bmi_group == "lean")
# Pick the OTU table
library(phyloseq)
otu <- abundances(pseq)
# SPIEC-EASI network reconstruction
# In practice, use more repetitions
library(SpiecEasi) #install_github("zdk123/SpiecEasi")
net <- spiec.easi(t(otu), method='mb', lambda.min.ratio=1e-2, nlambda=5, icov.select.params=list(rep.num=1))
## Create graph object
n <- net$refit
#colnames(n) <- rownames(n) <- rownames(otu)
# Network format
library(network)
#netw <- network(as.matrix(n), directed = FALSE)
# igraph format
library(igraph)
# ig <- graph.adjacency(n, mode='undirected', add.rownames = TRUE)
# Network layout
# coord <- layout.fruchterman.reingold(ig)
## set size of vertex to log2 mean abundance
# vsize <- log2(rowMeans(otu))
# Visualize the network
# print(plot(ig, layout = coord, vertex.size = vsize, vertex.label = names(vsize)))
#dd <- degree.distribution(ig)
#plot(0:(length(dd)-1), dd, ylim = c(0,.35), type = 'b',  ylab = "Frequency", xlab = "Degree", main = "Degree Distributions")
library(GGally)
library(ggnet)
library(network)
library(sna)
library(ggplot2)
library(intergraph) # ggnet2 works also with igraph with this
phyla <- map_levels(rownames(otu),
from = "Genus", to = "Phylum",
tax_table(pseq))
#netw %v% "Phylum" <- phyla
#p <- ggnet2(netw, color = "Phylum", label = TRUE, label.size = 2)
print(p)
#for (myfile in setdiff(fs, "Themes.Rmd")) {
for (myfile in fs) {
rmarkdown::render(myfile)
}
library(phyloseq)
library(microbiome)
library(knitr)
data(atlas1006)
# Rename the example data (which is a phyloseq object)
pseq <- atlas1006
summarize_phyloseq(pseq)
meta <- meta(pseq)
taxonomy <- tax_table(pseq)
# Absolute abundances
otu.absolute <- abundances(pseq)
# Relative abundances
otu.relative <- abundances(pseq, "compositional")
r <- readcount(pseq)
df <- psmelt(pseq)
kable(head(df))
head(sample_names(pseq))
s <- sample_sums(pseq)
head(abundances(pseq)["Akkermansia",])
pseq.subset <- subset_samples(pseq, nationality == "AFR")
library(phyloseq)
library(phyloseq)
remove.packages("phyloseq", lib="~/R/win-library/3.5")
getwd()
load("D:/Important/tutorial_from_old/.RData")
library(devtools)
install_github('joy711/phyloseq')
install_github('joey711/phyloseq')
library(phyloseq)
library(phyloseq)
library(microbiome)
library(phyloseq)
library(netresponse)
library(MASS)
library(dplyr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(devtools)
library(ggplot2)
#library(devtools)
#load_all()
library(microbiome)
library(rmarkdown)
library(knitr)
library(knitcitations)
library(knitr)
#fs <- c("DMM.Rmd", "index.Rmd")
#fs <- "Diversity.Rmd"
#fs <- "Heatmap.Rmd"
#fs <- "Profiling.Rmd"
#fs <- "RDA.Rmd"
#fs <- "SQL.Rmd"
#fs <- "index.Rmd"
#fs <- "rstanarm.Rmd"
#fs <- "Landscaping.Rmd"
#fs <- sample(list.files(pattern = ".Rmd$"), 20)
fs <- sample(list.files(pattern = ".Rmd$")) # Random order
knitr::opts_chunk$set(fig.path = "figure/", dev="CairoPNG")
times <- c()
namespaces0 <-  loadedNamespaces()
#for (myfile in setdiff(fs, "Themes.Rmd")) {
for (myfile in fs) {
rmarkdown::render(myfile)
}
warnings()
#system("git add *.md")
#system("git add figure/*")
#system("git add *.Rmd")
system("git add *.html")
system("git commit -a -m'homepage update'")
#for (myfile in setdiff(fs, "Themes.Rmd")) {
for (myfile in fs) {
rmarkdown::render(myfile)
}
plot(lplc, type="b", xlab="Number of Dirichlet Components", ylab="Model Fit")
warnings()
View(warnings())
warnings()[["MathJax doesn't work with self_contained when not using the rmarkdown "default" template."]]
d<-warnings()
unlist(d)
theme_graph(base_family="sans")
theme_graph(base_family="arial")
getwd()
remove.packages("netresponse", lib="~/R/win-library/3.5")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager", "Biostyle")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager", "Biostyle")
# Load packages into session, and print package version
sapply(c(.cran_packages, .bioc_packages, 'SpiecEasi', 'ggnet' ), require, character.only = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager", "Biostyle")
.cran_packages <- c("ggplot2", "gridExtra",'ape', 'dplyr','ggpubr', 'knitr','Cairo','devtools','data.table','splitstackshape', 'rmarkdown',
'tidyverse', 'readxl', 'vegan','knitcitations', 'reshape', 'reshape2',
'magrittr', 'vegan', 'IRanges','glue','stringr','devtools','captioner', 'rstan','rstanarm',
'hrbrthemes', 'gcookbook','GGally', 'rvg','ggiraph','network',
'ggnet','intergraph', 'rmdformats')
.bioc_packages <- c("dada2", "phyloseq",'SummarizedExperiment','Biobase',
'BiocInstaller', "DECIPHER",'IRanges','BiocGenerics', "phangorn",
'BiocStyle', "microbiome", "DESeq2", 'DirichletMultinomial',
'netresponse','microbiomeutilities','')
# package.version("microbiome")
#[1] "1.5.31"
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {
install.packages(.cran_packages[!.inst])
}
library('devtools')
install_github('zdk123/SpiecEasi')
install_github('briatte/ggnet')
.inst <- .bioc_packages %in% installed.packages()
if(any(!.inst)) {
source("http://bioconductor.org/biocLite.R")
biocLite(.bioc_packages[!.inst], ask = F)
}
install_github('antagomir/netresponse')
# Load packages into session, and print package version
sapply(c(.cran_packages, .bioc_packages, 'SpiecEasi', 'ggnet' ), require, character.only = TRUE)
# Load packages into session, and print package version
sapply(c(.cran_packages, .bioc_packages, 'SpiecEasi', 'ggnet' ), require, character.only = TRUE)
getwd()
source('init.R')
source('init.R')
library(microbiome)
library(phyloseq)
library(netresponse)
library(MASS)
library(dplyr)
library(MASS)
library(dplyr)
library(tidyr)
library(ggplot2)
library(devtools)
library(ggplot2)
#library(devtools)
#load_all()
library(microbiome)
library(rmarkdown)
library(knitr)
library(knitcitations)
library(knitr)
#fs <- c("DMM.Rmd", "index.Rmd")
#fs <- "Diversity.Rmd"
#fs <- "Heatmap.Rmd"
#fs <- "Profiling.Rmd"
#fs <- "RDA.Rmd"
#fs <- "SQL.Rmd"
#fs <- "index.Rmd"
#fs <- "rstanarm.Rmd"
#fs <- "Landscaping.Rmd"
#fs <- sample(list.files(pattern = ".Rmd$"), 20)
fs <- sample(list.files(pattern = ".Rmd$")) # Random order
knitr::opts_chunk$set(fig.path = "figure/", dev="CairoPNG")
times <- c()
namespaces0 <-  loadedNamespaces()
#for (myfile in setdiff(fs, "Themes.Rmd")) {
for (myfile in fs) {
rmarkdown::render(myfile)
}

theme_set(theme_bw(40))
df <- as.data.frame(t(sapply(times, identity)))
df$file <- rownames(df)
dfm <- as_tibble(melt(df, id = "file")) %>%
filter(variable %in% c("user.self", "elapsed")) %>%
arrange(value) %>%
mutate(file = factor(file, levels = unique(file)))
p <- ggplot(dfm, aes(x = file, fill = variable, y = value)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
coord_flip() + labs(x = "", y = "Time (s)")
print(p)
for (myfile in fs) {
times[[myfile]] <- system.time(rmarkdown::render(myfile))
}
best <- fit[[which.min(lplc)]]
times <- c()
# Render all files
for (myfile in fs) {
times[[myfile]] <- system.time(rmarkdown::render(myfile))
}
venn( list(ANOVA = taxa.anova,DESeq2 = taxa.deseq) )
# Check overlap
# Most DESEq2 taxa are confirmed with ANOVA
library(gplots)
venn( list(ANOVA = taxa.anova,DESeq2 = taxa.deseq) )
# Load libraries
library(microbiome)
library(ggplot2)
# Probiotics intervention example data
data(dietswap)
# Only check the core taxa to speed up examples
pseq <- core(dietswap, detection = 50, prevalence = 80/100)
library(phyloseq)
library(reshape2)
library(DESeq2)
# Running the DESeq2 analysis
ds2 <- phyloseq_to_deseq2(pseq, ~ nationality)
dds <- DESeq(ds2)
res <- results(dds)
df <- as.data.frame(res)
df$taxon <- rownames(df)
df <- df %>% arrange(log2FoldChange, padj)
library(knitr)
print(head(kable((df))))
# Identify top taxa based on standard ANOVA
source(system.file("extdata/check_anova.R", package = "microbiome"))
ano <- check_anova(pseq, "nationality");
ano$log2FC <- log2(ano$ave.AFR) - log2(ano$ave.AAM)
taxa.anova <- as.character(subset(ano, padj < 0.01 & abs(log2FC) > log2(2))$taxa)
# lowPick the top taxa based on DESEq2
taxa.deseq <- subset(res, padj < 0.01 & abs(log2FoldChange) > log2(2))$taxon
# Check overlap
# Most DESEq2 taxa are confirmed with ANOVA
library(gplots)
venn( list(ANOVA = taxa.anova,DESeq2 = taxa.deseq) )
# Also the est p-values are well correlated (higher not so)
mf<-data.frame(df$padj, ano$padj)
p<-ggplot(mf, aes(x = log10(df$padj), y = log10(ano$padj))) + xlab('DESeq2 adjusted p-value') + ylab('ANOVA adjusted p-value')
p<- p + geom_point()
#plot(xlim=log10(df$padj), log10(ano$padj), type = 'l', xlim = "DESeq2 adjusted p-value",  ylim("ANOVA adjusted p-value"))
venn( list(ANOVA = taxa.anova,DESeq2 = taxa.deseq))
print(p)
# Identify top taxa based on standard ANOVA
source(system.file("extdata/check_anova.R", package = "microbiome"))
ano <- check_anova(pseq, "nationality");
ano$log2FC <- log2(ano$ave.AFR) - log2(ano$ave.AAM)
taxa.anova <- as.character(subset(ano, padj < 0.01 & abs(log2FC) > log2(2))$taxa)
# lowPick the top taxa based on DESEq2
taxa.deseq <- subset(res, padj < 0.01 & abs(log2FoldChange) > log2(2))$taxon
# Check overlap
# Most DESEq2 taxa are confirmed with ANOVA
library(gplots)
#venn( list(ANOVA = taxa.anova,DESeq2 = taxa.deseq) )
# Also the est p-values are well correlated (higher not so)
mf<-data.frame(df$padj, ano$padj)
p<-ggplot(mf, aes(x = log10(df$padj), y = log10(ano$padj))) + xlab('DESeq2 adjusted p-value') + ylab('ANOVA adjusted p-value')
p<- p + geom_point()
#plot(xlim=log10(df$padj), log10(ano$padj), type = 'l', xlim = "DESeq2 adjusted p-value",  ylim("ANOVA adjusted p-value"))
venn( list(ANOVA = taxa.anova,DESeq2 = taxa.deseq))
print(p)
p<-ggplot(mf, aes(x = log10(df$padj), y = log10(ano$padj)), color = df.padj) + xlab('DESeq2 adjusted p-value') + ylab('ANOVA adjusted p-value')
p<- p + geom_point()
print(p)
# Also the est p-values are well correlated (higher not so)
mf<-data.frame(df$padj, ano$padj)
p<-ggplot(mf, aes(x = log10(df$padj), y = log10(ano$padj)), color = 'df.padj') + xlab('DESeq2 adjusted p-value') + ylab('ANOVA adjusted p-value')
p<- p + geom_point()
p
getwd()
rmarkdown::render('deseq2.rmd','html_document')
times <- c()
# Render all files
for (myfile in fs) {
times[[myfile]] <- system.time(rmarkdown::render(myfile))
}
library(microbiome)
library(DirichletMultinomial)
library(reshape2)
library(magrittr)
library(dplyr)
# Load example data
data(dietswap)
pseq <- dietswap
# To speed up, only consider the core taxa
# that are prevalent at 0.1% relative abundance in 50% of the samples
# (note that this is not strictly correct as information is
# being discarded; one alternative would be to aggregate rare taxa)
pseq.comp <- microbiome::transform(pseq, "compositional")
taxa <- core_members(pseq.comp, detection = 0.1/100, prevalence = 50/100)
pseq <- prune_taxa(taxa, pseq)
# Pick the OTU count matrix
# and convert it into samples x taxa format
dat <- abundances(pseq)
count <- as.matrix(t(dat))
fit <- mclapply(1:3, dmn, count = count, verbose=TRUE)
lplc <- sapply(fit, laplace) # AIC / BIC / Laplace
aic  <- sapply(fit, AIC) # AIC / BIC / Laplace
bic  <- sapply(fit, BIC) # AIC / BIC / Laplace
#plot(lplc, type="b", xlab="Number of Dirichlet Components", ylab="Model Fit")
#lines(aic, type="b", lty = 2)
#lines(bic, type="b", lty = 3)
best <- fit[[which.min(lplc)]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
getwd()
rmarkdown::render('README.rmd','md_document')
getwd()
setwd('D:/Seafile/My Library/Important/New_microbiome/tutorials/main')
rmarkdown::render('README.rmd','md_document')
getwd()
setwd('D:/Seafile/My Library/Important/New_microbiome/tutorials')
setwd('D:/Seafile/My Library/Important/New_microbiome/tutorials/main')
setwd('D:/Seafile/My Library/Important/New_microbiome/tutorials')
rmarkdown::render('README.rmd','md_document')
getwd()
rmarkdown::render('README.rmd','md_document')
rmarkdown::render('README.rmd','md_document')
knit2 = function(...) {
pdf.options(encoding='ISOLatin2.enc')
knitr::knit(...)
}
rmarkdown::render('README.rmd','md_document')
rmarkdown::render('README.rmd','md_document')
getwd()
rmarkdown::render('README.rmd','md_document')
getwd()
setwd('D:/Seafile/My Library/Important/New_microbiome/tutorials/main')
times <- c()
# Render all files
for (myfile in fs) {
times[[myfile]] <- system.time(rmarkdown::render(myfile))
}
rmarkdown::render("info.Rmd")
theme_set(theme_bw(40))
df <- as.data.frame(t(sapply(times, identity)))
df$file <- rownames(df)
dfm <- as_tibble(melt(df, id = "file")) %>%
filter(variable %in% c("user.self", "elapsed")) %>%
arrange(value) %>%
mutate(file = factor(file, levels = unique(file)))
library(tibble)
theme_set(theme_bw(40))
df <- as.data.frame(t(sapply(times, identity)))
df$file <- rownames(df)
dfm <- as_tibble(melt(df, id = "file")) %>%
filter(variable %in% c("user.self", "elapsed")) %>%
arrange(value) %>%
mutate(file = factor(file, levels = unique(file)))
df <- as.data.frame(t(sapply(times, identity)))
df$file <- rownames(df)
dfm <- as_tibble(melt(df, id = "file")) %>%
filter(variable %in% c("user.self", "elapsed")) %>%
arrange(value) %>%
mutate(file = factor(file, levels = unique(file)))
library(tibble)
theme_set(theme_bw(40))
df <- as.data.frame(t(sapply(times, identity)))
df$file <- rownames(df)
dfm <- as_tibble(melt(df, id = "file")) %>%
filter(variable %in% c("user.self", "elapsed")) %>%
arrange(value) %>%
mutate(file = factor(file, levels = unique(file)))
library(magrittr)
theme_set(theme_bw(40))
df <- as.data.frame(t(sapply(times, identity)))
df$file <- rownames(df)
dfm <- as_tibble(melt(df, id = "file")) %>%
filter(variable %in% c("user.self", "elapsed")) %>%
arrange(value) %>%
mutate(file = factor(file, levels = unique(file)))
dfm <- as_tibble(melt(df, id = "file")) %>%
filter(variable %>% c("user.self", "elapsed")) %>%
arrange(value) %>%
mutate(file = factor(file, levels = unique(file)))
f<-4
f1<-2
f2<-c(1,2,3,4,5,6,7)
f %in f2
f %in% f2
98 %in% f2
library(tibble)
library(magrittr)
theme_set(theme_bw(40))
df <- as.data.frame(t(sapply(times, identity)))
df$file <- rownames(df)
dfm <- as_tibble(melt(df, id = "file")) %>%
filter(variable %in% c("user.self", "elapsed")) %>%
arrange(value) %>%
mutate(file = factor(file, levels = unique(file)))
times <- c()
# Render all files
for (myfile in fs) {
times[[myfile]] <- system.time(rmarkdown::render(myfile))
}
rmarkdown::render("info.Rmd")
# Download the required R packages and then the HITChip Atlas data set
library(microbiome)
data(atlas1006)
tab <- alpha(atlas1006, index = c("shannon", "invsimpson"))
library(knitr)
kable(head(tab))
getwd()
setwd('D:/Seafile/My Library/Important/New_microbiome/tutorials')
times <- c()
# Render all files
for (myfile in fs) {
times[[myfile]] <- system.time(rmarkdown::render(myfile))
}
rmarkdown::render("info.Rmd")
library(microbiome)
library(DirichletMultinomial)
library(reshape2)
library(magrittr)
library(dplyr)
# Load example data
data(dietswap)
pseq <- dietswap
# To speed up, only consider the core taxa
# that are prevalent at 0.1% relative abundance in 50% of the samples
# (note that this is not strictly correct as information is
# being discarded; one alternative would be to aggregate rare taxa)
pseq.comp <- microbiome::transform(pseq, "compositional")
taxa <- core_members(pseq.comp, detection = 0.1/100, prevalence = 50/100)
pseq <- prune_taxa(taxa, pseq)
# Pick the OTU count matrix
# and convert it into samples x taxa format
dat <- abundances(pseq)
count <- as.matrix(t(dat))
fit <- mclapply(1:3, dmn, count = count, verbose=TRUE)
lplc <- sapply(fit, laplace) # AIC / BIC / Laplace
aic  <- sapply(fit, AIC) # AIC / BIC / Laplace
bic  <- sapply(fit, BIC) # AIC / BIC / Laplace
#plot(lplc, type="b", xlab="Number of Dirichlet Components", ylab="Model Fit")
#lines(aic, type="b", lty = 2)
#lines(bic, type="b", lty = 3)
best <- fit[[which.min(lplc)]]
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
lplc <- sapply(fit, laplace) # AIC / BIC / Laplace
aic  <- sapply(fit, AIC) # AIC / BIC / Laplace
bic  <- sapply(fit, BIC) # AIC / BIC / Laplace
#plot(lplc, type="b", xlab="Number of Dirichlet Components", ylab="Model Fit")
#lines(aic, type="b", lty = 2)
#lines(bic, type="b", lty = 3)
best <- fit[[which.min(lplc)]]
lplc <- sapply(fit, laplace) # AIC / BIC / Laplace
aic  <- sapply(fit, AIC) # AIC / BIC / Laplace
bic  <- sapply(fit, BIC) # AIC / BIC / Laplace
plot(lplc, type="b", xlab="Number of Dirichlet Components", ylab="Model Fit")
lplc <- sapply(fit, laplace) # AIC / BIC / Laplace
aic  <- sapply(fit, AIC) # AIC / BIC / Laplace
bic  <- sapply(fit, BIC) # AIC / BIC / Laplace
#plot(lplc, type="b", xlab="Number of Dirichlet Components", ylab="Model Fit")
#lines(aic, type="b", lty = 2)
#lines(bic, type="b", lty = 3)
#best <- fit[[which.min(lplc)]]
mixturewt(best)
mixturewt(best)
data.frame(pi = object@mixture$Weight, theta = colSums(fitted(object)))
fit <- mclapply(1:3, dmn, count = count, verbose=TRUE)
mixturewt(best)
ass <- apply(mixture(best), 1, which.max)
for (k in seq(ncol(fitted(best)))) {
d <- melt(fitted(best))
colnames(d) <- c("OTU", "cluster", "value")
d <- subset(d, cluster == k) %>%
# Arrange OTUs by assignment strength
arrange(value) %>%
mutate(OTU = factor(OTU, levels = unique(OTU))) %>%
# Only show the most important drivers
filter(abs(value) > quantile(abs(value), 0.8))
p <- ggplot(d, aes(x = OTU, y = value)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = paste("Top drivers: community type", k))
print(p)
}
library(BiocInstaller)
source("http://www.bioconductor.org/biocLite.R")
library(BiocManager)
source("https://bioconductor.org/install")
library(BiocManager)
source("https://bioconductor.org/install")
library(BiocManager)
source("https://bioconductor.org/install/#install-R")
library(devtools) # Load the devtools package
install_github("microbiome/microbiome") # Install the package
library(BiocManager)
source("https://bioconductor.org")
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/install")
library(BiocManager)
#source("https://bioconductor.org/install")
useDevel()
library(BiocManager)
#source("https://bioconductor.org/install")
#useDevel()
BiocManager::install("microbiome")
version('microbiome')
BiocManager::version('microbiome')
BiocManager::version()
microbiome::version()
library(BiocManager)
#source("https://bioconductor.org/install")
#useDevel()
BiocManager::install("microbiome")
remove.packages("microbiomeutilities", lib="~/R/win-library/3.6")
remove.packages("microbiome", lib="~/R/win-library/3.6")
# Installing from Bioconductor
source("http://www.bioconductor.org/biocLite.R")
# Installing from Bioconductor
#source("http://www.bioconductor.org/biocLite.R")
BiocManager::install("MASS")
# Installing from CRAN
install.packages("sorvi")
# Installing from Github
library(devtools)
install_github("antagomir/netresponse")
library(netresponse)
library(netresponse)
BiocManager::version()
library(BiocManager)
#source("https://bioconductor.org/install")
#useDevel()
BiocManager::install(version='devel')
BiocManager::install("microbiome")
library(microbiome)
library(BiocManager)
#source("https://bioconductor.org/install")
#useDevel()
BiocManager::install(version='devel')
BiocManager::install("microbiome")
n
library(devtools) # Load the devtools package
install_github("microbiome/microbiome") # Install the package
library(devtools) # Load the devtools package
getwd()
getwd()
library(rmarkdown)
library(rmarkdown)
remove.packages("rmarkdown", lib="~/R/win-library/3.6")
install.packages('rmarkdown')
library(rmarkdown)
library(rmarkdown)
install.packages()
install.packages('digest')
library(rmarkdown)
library(rmarkdown)
library(rmarkdown)
getwd()
getwd()
library(rmarkdown)
pandoc_version()
library(BiocManager)
#source("https://bioconductor.org/install")
#useDevel()
BiocManager::install(version='devel')
BiocManager::install("microbiome")
library(microbiome)
library(microbiome)
library(microbiome)
library(BiocManager)
#source("https://bioconductor.org/install")
#useDevel()
BiocManager::install("microbiome", version = 'devel')
library(microbiome)
library(microbiome)
install.packages('rhdf5')
library(microbiome)
library(rhdf5)
library(rhdf5)
library(microbiome)
detach("package:DirichletMultinomial", unload = TRUE)
remove.packages("microbiome", lib="~/R/win-library/3.6")
#source("https://bioconductor.org/install")
#useDevel()
BiocManager::install("microbiome", version = 'devel')
library(devtools) # Load the devtools package
install.packages(c("curl", "testthat"))
library(microbiome)
library(microbiome)
library(microbiome)
remove.packages("microbiome", lib="~/R/win-library/3.6")
library(devtools) # Load the devtools package
library(Rcpp)
library(Rcpp)
library(Rcpp)
install.packages('Rcpp')
install.packages("Rcpp")
library(Rcpp)
library(Rcpp)
library(BiocManager)
library(BiocManager)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install('microbiome')
library('microbiome')
library('microbiome')
library('microbiome')
library('microbiome')
library(vignette)
install.packages('vignette')
ip <- as.data.frame(installed.packages())
path.lib <- unique(ip$LibPath)
pkgs.to.remove <- ip[,1]
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
library(BiocManager)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
.cran_packages <- c("ggplot2", "gridExtra",'ape', 'dplyr','ggpubr', 'knitr','Cairo','devtools','data.table','splitstackshape', 'rmarkdown',
'tidyverse', 'readxl', 'vegan','knitcitations', 'reshape', 'reshape2',
'magrittr', 'vegan', 'IRanges','glue','stringr','devtools','captioner', 'rstan','rstanarm',
'hrbrthemes', 'gcookbook','GGally', 'rvg','ggiraph','network', 'gplots',
'ggnet','intergraph', 'rmdformats', 'FD', 'hrbrthemes', 'GGally', 'lattice')
source('init.R')
install.packages(.cran_packages[!.inst])
# Load packages into session, and print package version
sapply(c(.cran_packages, .bioc_packages, 'SpiecEasi', 'ggnet' ), require, character.only = TRUE)
library(microbiome)
path.lib <- unique(ip$LibPath)
pkgs.to.remove <- ip[,1]
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
rmarkdown::render('README.rmd','md_document')
rmarkdown::render('README.rmd','md_document')
rmarkdown::render('README.rmd','md_document')
library(BiocManager)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(BiocManager)
library(BiocManager)
.cran_packages <- c("ggplot2", "gridExtra",'ape', 'dplyr','ggpubr', 'knitr','Cairo','devtools','data.table','splitstackshape', 'rmarkdown',
'tidyverse', 'readxl', 'vegan','knitcitations', 'reshape', 'reshape2',
'magrittr', 'vegan', 'IRanges','glue','stringr','devtools','captioner', 'rstan','rstanarm',
'hrbrthemes', 'gcookbook','GGally', 'rvg','ggiraph','network', 'gplots',
'ggnet','intergraph', 'rmdformats', 'FD', 'hrbrthemes', 'GGally', 'lattice')
.bioc_packages <- c("dada2", "phyloseq",'SummarizedExperiment','Biobase',
"DECIPHER",'IRanges','BiocGenerics', "phangorn",
'BiocStyle', "microbiome", "DESeq2", 'DirichletMultinomial')
# package.version("microbiome")
#[1] "1.5.31"
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {
install.packages(.cran_packages[!.inst])
}
install.packages(.cran_packages[!.inst])
sapply(.cran_packages, require, character.only = TRUE)
sapply(.cran_packages, require, character.only = TRUE)
# package.version("microbiome")
#[1] "1.5.31"
.inst <- .cran_packages %in% installed.packages()
if(any(!.inst)) {
install.packages(.cran_packages[!.inst])
}
install.packages(.cran_packages[!.inst])
sapply(.cran_packages, require, character.only = TRUE)
install.packages('ggnet')
install.packages('Iranges')
install.packages('IRanges')
install.packages("devtools")
install.packages("devtools")
library(BiocManager)

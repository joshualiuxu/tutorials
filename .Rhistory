mutate(padj_value = p.adjust(p_value, "BH")) %>%
arrange(variable)
library(dplyr)
source("functions.R")
library(dplyr)
source("functions.R")
phy.clr <- phy %>% microbiome::transform("compositional")
genus.stress.clr <- phy.clr %>% abundances() %>% t
permutations <- 999
controls <- c()
independent_vars <- "Group_Num" # Groupings to compare
alpha_level <- 0.05
library(vegan)
library(magrittr)
library(tibble)
library(microbiome)
permanova_results <- lapply(independent_vars, function(var) do_permanova(pseq = phy.clr,
group = var,
permutations = permutations)) %>%
set_names(independent_vars) %>%
do.call(rbind, .) %>%
m_neat(colnames = c("variable", "R2", "p_value")) %>%
mutate(padj_value = p.adjust(p_value, "BH")) %>%
arrange(variable)
library(dplyr)
source("functions.R")
phy.clr <- phy %>% microbiome::transform("compositional")
genus.stress.clr <- phy.clr %>% abundances() %>% t
permutations <- 999
controls <- c()
independent_vars <- "bmi_group" # Groupings to compare
alpha_level <- 0.05
library(vegan)
library(magrittr)
library(tibble)
library(microbiome)
permanova_results <- lapply(independent_vars, function(var) do_permanova(pseq = phy.clr,
group = var,
permutations = permutations)) %>%
set_names(independent_vars) %>%
do.call(rbind, .) %>%
m_neat(colnames = c("variable", "R2", "p_value")) %>%
mutate(padj_value = p.adjust(p_value, "BH")) %>%
arrange(variable)
significant_permanova_results <- permanova_results %>% filter(padj_value < alpha_level)
if (nrow(significant_permanova_results) > 0) {
kable(significant_permanova_results)
} else {
print("No significant differences between groups in PERMANOVA analysis.")
}
#write_tableHTML(tableHTML(permanova_results), file = "~/fbr/exp/stress/rmd_docs/analyses/images/parmanova_results.html")
theme_set(theme_bw(15))
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ps <- microbiome::transform(phy, trans)
ord <- ordinate(ps, formula = ~Group_Num, method, distance)
theme_set(theme_bw(15))
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ps <- microbiome::transform(phy, trans)
ord <- ordinate(ps, formula = ~bmi_group, method, distance)
theme_set(theme_bw(15))
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ps <- microbiome::transform(phy, trans)
ord <- ordinate(ps, formula = ~ bmi_group, method, distance)
l$bmi_group
ps <- microbiome::transform(phy, trans)
ord <- ordinate(ps, formula = ~ bmi_group, method, distance)
view(l)
theme_set(theme_bw(15))
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ps <- microbiome::transform(phy, trans)
ord <- ordinate(ps, formula = ~ nationality, method, distance)
theme_set(theme_bw(15))
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ps <- microbiome::transform(phy, trans)
ord <- ordinate(ps, formula = ~ sex, method, distance)
p1 <- plot_ordination(ps, ord, "samples", color="Group_name") +
#stat_ellipse(type = "norm", linetype = 1) +
labs(title = "redundancy analysis (PCA via rda)")
h<-meta(phy)
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ord <- ordinate(ps, formula = ~ 1, method, distance)
Group_name<-c('High_fat_placebo_supplement', 'High_fat_XOS_supplement', 19,'Low_fat_placebo_supplement', 'Low_fat_XOS_supplement', 20)
p2 <- plot_ordination(ps, ord, "samples", color = 'bmi_group') +stat_ellipse(type = "norm", linetype =1) +labs(title = "PCA")
print(p2)
ord <- ordinate(ps, formula = ~ 1, method, distance)
ps <- microbiome::transform(phy, trans)
ord <- ordinate(ps, formula = ~ 1, method, distance)
p1 <- plot_ordination(ps, ord, "samples", color="Group_name") +
#stat_ellipse(type = "norm", linetype = 1) +
labs(title = "redundancy analysis (PCA via rda)")
print(p1)
ord <- ordinate(ps, formula = ~ 2, method, distance)
theme_set(theme_bw(15))
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ps <- microbiome::transform(phy, trans)
ord <- ordinate(ps, formula = ~ 1, method, distance)
p1 <- plot_ordination(ps, ord, "samples", color="Group_name") +
#stat_ellipse(type = "norm", linetype = 1) +
labs(title = "redundancy analysis (PCA via rda)")
print(p1)
h<-meta(phy)
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ord <- ordinate(ps, formula = ~ 1, method, distance)
p2 <- plot_ordination(ps, ord, "samples", color = 'bmi_group') +stat_ellipse(type = "norm", linetype =1) +labs(title = "PCA")
print(p2)
p1 <- plot_ordination(ps, ord, "samples", color="nationality") +
#stat_ellipse(type = "norm", linetype = 1) +
labs(title = "redundancy analysis (PCA via rda)")
print(p1)
h<-meta(phy)
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ord <- ordinate(ps, formula = ~ 1, method, distance)
p2 <- plot_ordination(ps, ord, "samples", color = 'bmi_group') +stat_ellipse(type = "norm", linetype =1) +labs(title = "PCA")
print(p2)
p1
p2
ord <- ordinate(ps, formula = ~ 1, method, distance)
p1 <- plot_ordination(ps, ord, "samples", color="nationality") +
stat_ellipse(type = "norm", linetype = 1) +
labs(title = "redundancy analysis (PCA via rda)")
p1
p2
theme_set(theme_bw(15))
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ps <- microbiome::transform(phy, trans)
ord <- ordinate(ps, formula = ~ 1, method, distance)
p1 <- plot_ordination(ps, ord, "samples", color="nationality") +
stat_ellipse(type = "norm", linetype = 1) +
labs(title = "PCA by method RDA")
print(p1)
print(p1)
ord <- ordinate(ps, formula = ~ diversity, method, distance)
theme_set(theme_bw(15))
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ps <- microbiome::transform(phy, trans)
ord <- ordinate(ps, formula = ~ diversity, method, distance)
p1 <- plot_ordination(ps, ord, "samples", color="nationality") +
stat_ellipse(type = "norm", linetype = 1) +
labs(title = "PCA by method RDA")
print(p1)
ord <- ordinate(ps, formula = ~ diversity, method, distance)
p1 <- plot_ordination(ps, ord, "samples", color="diversity") +
stat_ellipse(type = "norm", linetype = 1) +
labs(title = "PCA by method RDA")
print(p1)
view(l)
ord <- ordinate(ps, formula = ~ project, method, distance)
p1 <- plot_ordination(ps, ord, "samples", color="diversity") +
stat_ellipse(type = "norm", linetype = 1) +
labs(title = "PCA by method RDA")
print(p1)
ps <- microbiome::transform(phy, trans)
ord <- ordinate(ps, formula = ~ project, method, distance)
p1 <- plot_ordination(ps, ord, "samples", color="project") +
stat_ellipse(type = "norm", linetype = 1) +
labs(title = "PCA by method RDA")
print(p1)
ord <- ordinate(ps, formula = ~ nationality, method, distance)
ord <- ordinate(ps, formula = ~ age, method, distance)
theme_set(theme_bw(15))
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ps <- microbiome::transform(phy, trans)
ord <- ordinate(ps, formula = ~ diversity, method, distance)
p1 <- plot_ordination(ps, ord, "samples", color="diversity") +
stat_ellipse(type = "norm", linetype = 1) +
labs(title = "PCA by method RDA")
print(p1)
ps <- microbiome::transform(dietswap, trans)
u<-meta(dietswap)
dietswap
atlas1006
ord <- ordinate(ps, formula = ~ nationality, method, distance)
theme_set(theme_bw(15))
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ps <- microbiome::transform(dietswap, trans)
ord <- ordinate(ps, formula = ~ nationality, method, distance)
p1 <- plot_ordination(ps, ord, "samples", color="nationality") +
stat_ellipse(type = "norm", linetype = 1) +
labs(title = "RDA")
print(p1)
method <- "RDA"
trans <- "compositional"
distance <- "bray"
ord <- ordinate(phy, formula = ~ 1, method, distance)
p2 <- plot_ordination(ps, ord, "samples", color = 'Group_name') +stat_ellipse(type = "norm", linetype =1) +labs(title = "PCA")
print(p2)
ord <- ordinate(dietswap, formula = ~ 1, method, distance)
p2 <- plot_ordination(ps, ord, "samples", color = 'nationality') +stat_ellipse(type = "norm", linetype =1) +labs(title = "PCA")
print(p2)
```{r deseq2, echo=FALSE, warning=FALSE, message=FALSE}
library(phyloseq)
library(reshape2)
library(DESeq2)
mypseq <- phy
# Remove NAs
group <- "Group"
keep <- meta(mypseq)[, group] %>% complete.cases()
df <- meta(mypseq)[keep, ]
keep <- meta(mypseq)[, bmi_group] %>% complete.cases()
# Running the DESeq2 analysis
quiet(ds2 <- phyloseq_to_deseq2(phy, ~ Group))
# Running the DESeq2 analysis
quiet(ds2 <- phyloseq_to_deseq2(phy, ~ bmi_group))
mypseq <- dietswap
# Running the DESeq2 analysis
quiet(ds2 <- phyloseq_to_deseq2(mypseq, ~ bmi_group))
dds <- DESeq(ds2)
dds <- DESeq(ds2)
res <- results(dds)
df <- as.data.frame(res)
df$taxon <- rownames(df)
df <- df %>% arrange(log2FoldChange, padj) %>%
filter(padj < padj.th)
top.taxa <- as.character(df$taxon)
library(knitr)
kable(df)
df <- meta(phy)
ps <- transform(phy, "clr")
for (tax in top.taxa) {
df$taxa <- abundances(ps)[tax, ]
p <- ggplot(df, aes(x = Group, y = taxa)) +
geom_boxplot() +
labs(x = "", y = "Abundance", title = tax)
print(p)
}
df <- meta(phy)
ps <- transform(phy, "clr")
for (tax in top.taxa) {
df$taxa <- abundances(ps)[tax, ]
p <- ggplot(df, aes(x = bmi_group, y = taxa)) +
geom_boxplot() +
labs(x = "bmi_group", y = "Abundance", title = tax)
print(p)
}
df <- meta(phy)
ps <- transform(phy, "clr")
for (tax in top.taxa) {
df$taxa <- abundances(ps)[tax, ]
p <- ggplot(df, aes(x = bmi_group, y = taxa, color = 'bmi_group')) +
geom_boxplot() +
labs(x = "bmi_group", y = "Abundance", title = tax)
print(p)
}
p <- ggplot(df, aes(x = bmi_group, y = taxa, color = 'bmi_group')) +
geom_boxplot() + theme(axis.text.x = 60, hjust = 1)
df <- meta(phy)
ps <- transform(phy, "clr")
for (tax in top.taxa) {
df$taxa <- abundances(ps)[tax, ]
p <- ggplot(df, aes(x = bmi_group, y = taxa, color = 'bmi_group')) +
geom_boxplot() + theme(axis.text.x = 60, hjust = 1)
labs(x = "bmi_group", y = "Abundance", title = tax)
print(p)
}
df <- meta(phy)
ps <- transform(phy, "clr")
for (tax in top.taxa) {
df$taxa <- abundances(ps)[tax, ]
p <- ggplot(df, aes(x = bmi_group, y = taxa, color = 'bmi_group')) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(x = "bmi_group", y = "Abundance", title = tax)
print(p)
}
# Remove NAs
group <- "bmi_group"
keep <- meta(phy)[, bmi_group] %>% complete.cases()
meta(phy)
colnames(meta(phy))
# Remove NAs
group <- "bmi_group"
keep <- meta(phy)[, group] %>% complete.cases()
df <- meta(mypseq)[keep, ]
mygroup <- "CED"
df$group <- as.factor(df[[group]] == mygroup)
sample_data(mypseq) <- sample_data(df)
mypseq <- phy
# Remove NAs
group <- "bmi_group"
keep <- meta(phy)[, group] %>% complete.cases()
df <- meta(mypseq)[keep, ]
mygroup <- "CED"
df$group <- as.factor(df[[group]] == mygroup)
sample_data(mypseq) <- sample_data(df)
# Running the DESeq2 analysis
quiet(ds2 <- phyloseq_to_deseq2(mypseq, ~ bmi_group))
dds <- DESeq(ds2)
library(phyloseq)
library(reshape2)
library(DESeq2)
mypseq <- phy
# Remove NAs
group <- "bmi_group"
keep <- meta(phy)[, group] %>% complete.cases()
df <- meta(mypseq)[keep, ]
mygroup <- "CED"
df$group <- as.factor(df[[group]] == mygroup)
sample_data(mypseq) <- sample_data(df)
# Running the DESeq2 analysis
quiet(ds2 <- phyloseq_to_deseq2(mypseq, ~ bmi_group))
dds <- DESeq(ds2)
res <- results(dds)
df <- as.data.frame(res)
df$taxon <- rownames(df)
df <- df %>% arrange(log2FoldChange, padj) %>%
filter(padj < padj.th)
top.taxa <- as.character(df$taxon)
library(knitr)
kable(df)
kable(head(df,20))
df <- df %>% arrange(log2FoldChange, padj) %>%
filter(padj < padj.th)
top.taxa <- as.character(df$taxon)
kable(df)
df <- meta(phy)
ps <- transform(phy, "clr")
for (tax in top.taxa) {
df$taxa <- abundances(ps)[tax, ]
p <- ggplot(df, aes(x = bmi_group, y = taxa, color = 'bmi_group')) +
geom_boxplot() + theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(x = "bmi_group", y = "Abundance", title = tax)
print(p)
}
rmarkdown::render('te.rmd','all')
rmarkdown::render('te.rmd','all')
ps <- aggregate_taxa(phy, "Phylum")
ps <- microbiome::transform(ps, "compositional")
ps.core <- core(ps, detection = core_detection, prevalence = core_prevalence)
m <- round(100 * rowMeans(abundances(ps.core)), 1)
prev <- round(100 * prevalence(ps.core, detection = core_detection), 1)
d <- as.data.frame(list(Taxon = names(m), Abundance = m, Prevalence = prev))
rownames(d) <- NULL
d <- d %>% arrange(desc(Abundance), desc(Prevalence))
colnames(d) <- c("Taxon", "Relative abundance (%)", "Prevalence (%)")
kable(d)
theme_set(theme_bw(base_size = 10))
dfm <- melt(abundances(ps.core))
dfm$Var1 <- factor(dfm$Var1, levels = rev(d$Taxon))
dfm$Var_new = str_wrap(dfm$Var1, width = 40)
p2 <- ggplot(dfm, aes(x = Var_new, y = value, color = 'pink')) +
geom_boxplot() +
scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = 'Taxa', title = "Core abundance variation")
print(p2)
theme_set(theme_bw(base_size = 7))
library(RColorBrewer)
prevalences <- seq(.05, 1, .05)
detections <- 10^seq(log10(1e-3), log10(.2), length = 10)
ps <- microbiome::transform(ps, "compositional")
p1 <- plot_core(ps, plot.type = "heatmap",
prevalences = prevalences,
detections = detections,
colours = rev(brewer.pal(11, "Spectral")),
min.prevalence = .2, horizontal = FALSE)
print(p1)
theme_set(theme_bw(base_size = 10))
dfm <- melt(abundances(ps.core))
dfm$Var1 <- factor(dfm$Var1, levels = rev(d$Taxon))
dfm$Var_new = str_wrap(dfm$Var1, width = 40)
p2 <- ggplot(dfm, aes(x = Var_new, y = value, color = 'pink')) +
geom_boxplot() +
scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = 'Taxa', title = "Core abundance variation")
print(p2)
theme_set(theme_bw(base_size = 10))
dfm <- melt(abundances(ps.core))
dfm$Var1 <- factor(dfm$Var1, levels = rev(d$Taxon))
dfm$Var_new = str_wrap(dfm$Var1, width = 40)
p2 <- ggplot(dfm, aes(x = Var_new, y = value, color = 'pink')) +
geom_boxplot() +
scale_y_log10(label = scales::percent) +
coord_flip() + theme(legend.position="none") +
labs(y = "Relative abundance (%)", x = 'Taxa', title = "Core abundance variation")
print(p2)
print(p1)
rmarkdown::render('te.rmd','all')
rmarkdown::render('te.rmd','all')
rmarkdown::render('te.rmd','all')
library(phyloseq)
library(reshape2)
library(stringr)
theme_set(theme_bw(20))
transform <- microbiome::transform
# List continuous variables to assess
continuous<-c()
df <- meta(phy)
for (varname in continuous) {
df$varname <- df[[varname]]
p <- ggplot(df, aes(x = varname)) +
geom_histogram() +
labs(x = varname, title = varname, y = "Frequncy")
print(p)
}
taxa <- core_members(transform(phy, "compositional"),
detection = core_detection,
prevalence = core_prevalence)
ps <- prune_taxa(taxa, transform(phy, "clr"))
m <- meta(phy)[, continuous]
rmarkdown::render('te.rmd','all')
rmarkdown::render('te1.rmd','all')
rmarkdown::render('te.rmd','all')
rmarkdown::render('te.rmd','all')
rmarkdown::render('te.rmd','all')
rmarkdown::render('te.rmd','all')
rmarkdown::render('te.rmd','all')
rmarkdown::render('te.rmd','all')
library(readxl)
metalist <- list()
meta <- read_excel("data/metadata/metadata.xlsx", sheet = 1) # Kaura: sheet = 1; Peruna: sheet = 2
files <- unique(c(meta$FilenameR1, meta$FIlenameR2))
# Reverse/complement reads
# Sort ensures forward/reverse reads are in same order
fnFs <- intersect(sort(list.files(miseq_path, pattern="_R1_001.fastq")), files)
fnRs <- intersect(sort(list.files(miseq_path, pattern="_R2_001.fastq")), files)
# Reverse/complement reads
# Sort ensures forward/reverse reads are in same order
fnFs <- intersect(sort(list.files(miseq_path, pattern="_R1_001.fastq")), files)
fnRs <- intersect(sort(list.files(miseq_path, pattern="_R2_001.fastq")), files)
# Specify the full path to the fnFs and fnRs
fnFs <- file.path(miseq_path, fnFs)
fnRs <- file.path(miseq_path, fnRs)
getwd()
getwd()
rmarkdown::render('alpha_diversity.rmd','md_document')
rmarkdown::render('beta_diversity.rmd','md_document')
rmarkdown::render('alpha_diversity.rmd','md_document')
rmarkdown::render('alpha_diversity.rmd','md_document')
rmarkdown::render('alpha_diversity.rmd','md_document')
rmarkdown::render('alpha_diversity.rmd','md_document')
rmarkdown::render('alpha_diversity.rmd','md_document')
rmarkdown::render('alpha_diversity.rmd','md_document')
rmarkdown::render('core','md_document')
rmarkdown::render('core.rmd','md_document')
rmarkdown::render(core_microbiota.rmd','md_document)
rmarkdown::render(core_microbiota.rmd','md_document'')
rmarkdown::render('core_microbiota.rmd','md_document')
rmarkdown::render('ordination.rmd','md_document')
rmarkdown::render('core_microbiota.rmd','md_document')
rmarkdown::render('ordination.rmd','md_document')
rmarkdown::render('continuous_variable.rmd','md_document')
getwd()
setwd('D:/Seafile/My Library/Important/Final_microbiome/tutorials')
rmarkdown::render('Tutorial.rmd','all')
# Load libraries
library(microbiome)
library(ggplot2)
library(magrittr)
library(dplyr)
# Probiotics intervention example data
data(dietswap)
# Only check the core taxa to speed up examples
pseq <- core(dietswap, detection = 50, prevalence = 80/100)
library(phyloseq)
library(reshape2)
library(DESeq2)
library(knitr)
library(magrittr)
# Running the DESeq2 analysis
ds2 <- phyloseq_to_deseq2(pseq, ~ nationality)
dds <- DESeq(ds2)
res <- results(dds)
df <- as.data.frame(res)
df$taxon <- rownames(df)
df <- df %>% arrange(log2FoldChange, padj)
library(knitr)
print(head(kable((df))))
# Identify top taxa based on standard ANOVA
source(system.file("extdata/check_anova.R", package = "microbiome"))
ano <- check_anova(pseq, "nationality");
ano$log2FC <- log2(ano$ave.AFR) - log2(ano$ave.AAM)
taxa.anova <- as.character(subset(ano, padj < 0.01 & abs(log2FC) > log2(2))$taxa)
# lowPick the top taxa based on DESEq2
taxa.deseq <- subset(res, padj < 0.01 & abs(log2FoldChange) > log2(2))$taxon
# Check overlap
# Most DESEq2 taxa are confirmed with ANOVA
library(gplots)
#venn( list(ANOVA = taxa.anova,DESeq2 = taxa.deseq) )
# Also the est p-values are well correlated (higher not so)
mf<-data.frame(df$padj, ano$padj)
p<-ggplot(mf, aes(x = log10(df$padj), y = log10(ano$padj))) + xlab('DESeq2 adjusted p-value') + ylab('ANOVA adjusted p-value')
p<- p + geom_point()
#plot(xlim=log10(df$padj), log10(ano$padj), type = 'l', xlim = "DESeq2 adjusted p-value",  ylim("ANOVA adjusted p-value"))
venn( list(ANOVA = taxa.anova,DESeq2 = taxa.deseq))
print(p)
rmarkdown::render('deseq2.Rmd','all')
